/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
 *
 */

namespace Starcounter
{
    public static partial class Error
    {
        /// <summary> 
        /// An unspecified error caused the operation to fail.
        /// </summary>
        public const uint SCERRUNSPECIFIED = 999;
        /// <summary> 
        /// One or more arguments was invalid.
        /// </summary>
        public const uint SCERRBADARGUMENTS = 1001;
        /// <summary> 
        /// Code not enhanced.
        /// </summary>
        /// <remarks>
        /// Runtime error occuring when accessing code that needs to be enhanced in order to work, but for some reason hasn&#39;t,
        /// </remarks>
        public const uint SCERRCODENOTENHANCED = 1002;
        /// <summary> 
        /// Operation failed because needed memory couldn&#39;t be allocated.
        /// </summary>
        public const uint SCERROUTOFMEMORY = 1003;
        /// <summary> 
        /// The operation failed because the current thread wasn&#39;t attached to the scheduler.
        /// </summary>
        /// <remarks>
        /// This can either indicate that the thread is temporarily detached from the scheduler or that it isn&#39;t a worker thread. Only certain operations differs between the two.
        /// </remarks>
        public const uint SCERRTHREADNOTATTACHED = 1004;
        /// <summary> 
        /// The requested operation is not supported on the specific object.
        /// </summary>
        public const uint SCERRNOTSUPPORTED = 1005;
        /// <summary> 
        /// The operation failed because the calling thread isn&#39;t a worker thread.
        /// </summary>
        public const uint SCERRNOTAWORKERTHREAD = 1006;
        /// <summary> 
        /// The operation failed because the current thread was attached to the scheduler and detached thread was expected.
        /// </summary>
        public const uint SCERRTHREADNOTDETACHED = 1007;
        /// <summary> 
        /// The operation failed because it required the thread to yield but yield was blocked.
        /// </summary>
        public const uint SCERRTHREADYIELDBLOCKED = 1008;
        /// <summary> 
        /// Generic error code for counter mismatch.
        /// </summary>
        public const uint SCERRCOUNTERMISMATCH = 1009;
        /// <summary> 
        /// Generic error code for counter overflow.
        /// </summary>
        public const uint SCERRCOUNTEROVERFLOW = 1010;
        /// <summary> 
        /// A stack overflow has been detected.
        /// </summary>
        public const uint SCERRSTACKOVERFLOW = 1011;
        /// <summary> 
        /// The wait timed out before the object was signaled.
        /// </summary>
        public const uint SCERRWAITTIMEOUT = 1012;
        /// <summary> 
        /// The operation failed because the maximum number of worker threads has been reached and the operation required the scheduler to create additional worker threads.
        /// </summary>
        /// <remarks>
        /// This error can occur when a large number of worker threads are blocked.
        /// </remarks>
        public const uint SCERRMAXTHREADSREACHED = 1013;
        /// <summary> 
        /// Failed to generate an UUID.
        /// </summary>
        public const uint SCERRCANTCREATEUUID = 1014;
        /// <summary> 
        /// Operation failed because of an attempt to release ownership of a mutex not owned by the current thread.
        /// </summary>
        public const uint SCERRMUTEXNOTOWNED = 1016;
        /// <summary> 
        /// A non blocking operation failed because if would be required to block.
        /// </summary>
        public const uint SCERRWOULDBLOCK = 1017;
        /// <summary> 
        /// A cooperatively scheduled worker thread has been unresponsive for an unacceptably long period of time.
        /// </summary>
        /// <remarks>
        /// <para>A cooperatively scheduled worker thread is considered unresponsive when it hasn&#39;t yielded for more then a minute but this error isn&#39;t generated unless the thread has been unresponsive for a user configured period of time (2 minutes by default). If a thread is detected to be unresponsive but not long enough for the error to be generated, a warning is generated instead. </para>
        /// <para>The error is likely caused by an infinite loop or a deadlock but could also be caused by the thread doing something that doesn&#39;t give it the opportunity to yield for a very long period of time (which also is a real problem since the stall timeout is configured in minutes). </para>
        /// </remarks>
        public const uint SCERRUNRESPOSIVETHREADSTALL = 1018;
        /// <summary> 
        /// All threads available to the scheduler has been blocked for an unacceptably long period of time.
        /// </summary>
        /// <remarks>
        /// The error is likely an indication of a deadlock or a highly contested lock held for a very long period of time.
        /// </remarks>
        public const uint SCERRTHREADSBLOCKEDSTALL = 1019;
        /// <summary> 
        /// A task still held resource when terminating that should have been released before the task terminated.
        /// </summary>
        /// <remarks>
        /// Error currently only raised when exclusive environment ownership hasn&#39;t been released when task terminated. This should not occur.
        /// </remarks>
        public const uint SCERRTASKCLEANUPINCOMPLETE = 1020;
        /// <summary> 
        /// A cooperatively scheduled worker thread has been unwilling to yield for an unacceptably long period of time.
        /// </summary>
        public const uint SCERRUNYIELDINGTHREADSTALL = 1021;
        /// <summary> 
        /// Use of reattach function for manually detached threads on auto detached thread.
        /// </summary>
        public const uint SCERRTHREADAUTODETACHED = 1022;
        /// <summary> 
        /// Use of reattach function for auto detached threads on manually detached thread.
        /// </summary>
        public const uint SCERRTHREADNOTAUTODETACHED = 1023;
        /// <summary> 
        /// Generic error code indicating that debug verification failed.
        /// </summary>
        public const uint SCERRDEBUGVERIFYFAILED = 1024;
        /// <summary> 
        /// Operation invalid for the object&#39;s current state.
        /// </summary>
        public const uint SCERRINVALIDOPERATION = 1025;
        /// <summary> 
        /// Operation failed because the target input queue was full.
        /// </summary>
        public const uint SCERRINPUTQUEUEFULL = 1026;
        /// <summary> 
        /// The method, operation or feature is not implemented.
        /// </summary>
        public const uint SCERRNOTIMPLEMENTED = 1027;
        /// <summary> 
        /// Access to an environment variable was not permitted due to the current security settings.
        /// </summary>
        public const uint SCERRENVVARIABLENOTACCESSIBLE = 1028;
        /// <summary> 
        /// The environment variable holding the path to the Starcounter installation directory was not found.
        /// </summary>
        public const uint SCERRBINDIRENVNOTFOUND = 1029;
        /// <summary> 
        /// The format of the command-line was invalid.
        /// </summary>
        public const uint SCERRBADCOMMANDLINEFORMAT = 1030;
        /// <summary> 
        /// Command-line arguments didn&#39;t match the defined syntax.
        /// </summary>
        public const uint SCERRBADCOMMANDLINESYNTAX = 1031;
        /// <summary> 
        /// The license key used to initialize the PostSharp library was invalid.
        /// </summary>
        public const uint SCERRBADPOSTSHARPLICENSE = 1032;
        /// <summary> 
        /// Parsing an error message string failed due to an incorrect message format.
        /// </summary>
        public const uint SCERRWRONGERRORMESSAGEFORMAT = 1033;
        /// <summary> 
        /// The operation was cancelled.
        /// </summary>
        public const uint SCERROPERATIONCANCELLED = 1034;
        /// <summary> 
        /// A Starcounter process with the specified name is already started.
        /// </summary>
        public const uint SCERRAPPALREADYSTARTED = 2001;
        /// <summary> 
        /// Base directory (baseDirectory) missing from config or invalid.
        /// </summary>
        /// <remarks>
        /// Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a base directory isn&#39;t specified when one is required.
        /// </remarks>
        public const uint SCERRBADBASEDIRECTORYCONFIG = 2002;
        /// <summary> 
        /// Temp directory (tempDirectory) missing from config or invalid.
        /// </summary>
        /// <remarks>
        /// Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file).
        /// </remarks>
        public const uint SCERRBADTEMPDIRECTORYCONFIG = 2003;
        /// <summary> 
        /// Image directory (imageDirectory) missing from config or invalid.
        /// </summary>
        /// <remarks>
        /// Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a image directory isn&#39;t specified when one is required.
        /// </remarks>
        public const uint SCERRBADIMAGEDIRECTORYCONFIG = 2004;
        /// <summary> 
        /// The transaction log directory (transactionLogDirectory) is missing from config or invalid.
        /// </summary>
        /// <remarks>
        /// Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a transaction log directory isn&#39;t specified when one is required.
        /// </remarks>
        public const uint SCERRBADTLOGDIRECTORYCONFIG = 2005;
        /// <summary> 
        /// Unable to initialize the CLR.
        /// </summary>
        public const uint SCERRCANTINITIALIZECLR = 2012;
        /// <summary> 
        /// Unable to load host environment.
        /// </summary>
        public const uint SCERRCANTLOADHOSTENVIRONMENT = 2013;
        /// <summary> 
        /// The operation failed because sccorelog.dll or one of the functions it exports couldn&#39;t be loaded.
        /// </summary>
        /// <remarks>
        /// Most likely caused by a faulty installation.
        /// </remarks>
        public const uint SCERRLOGMODULENOTFOUND = 2014;
        /// <summary> 
        /// The properties of the different disk drives used to store the image files don&#39;t have compatible configuration (do they have the same sector sizes?).
        /// </summary>
        public const uint SCERRIMAGESTORAGEMISMATCH = 2015;
        /// <summary> 
        /// The properties of the disk drive doesn&#39;t match the database image (is the disk drive is configured for a different sector size than the image is built for?).
        /// </summary>
        public const uint SCERRIMAGESTORAGEINCOMPATIBLE = 2016;
        /// <summary> 
        /// The database files are build for a different Starcounter version and are not compatible with the current version.
        /// </summary>
        public const uint SCERRWRONGDATABASEVERSION = 2017;
        /// <summary> 
        /// Could not acquire the privileges needed for the operation to complete successfully.
        /// </summary>
        /// <remarks>
        /// This error code is obsolete in current version.
        /// </remarks>
        public const uint SCERRCANTGETPRIVILEGESNEEDED = 2018;
        /// <summary> 
        /// Attempt to load database files from different databases was detected.
        /// </summary>
        /// <remarks>
        /// This means that one of the image files, the transaction log or all three files were created for different databases.
        /// </remarks>
        public const uint SCERRDATABASEFILEMISMATCH = 2022;
        /// <summary> 
        /// One of more of the languages the database is configured for isn&#39;t supported by the current system.
        /// </summary>
        public const uint SCERRDATABASELANGUNSUPPORTED = 2023;
        /// <summary> 
        /// Code loder error.
        /// </summary>
        /// <remarks>
        /// General error produced by the code loader component. This error indicates that an operation during startup requiered some code to be accessed via the .NET reflection engine and that the loader cound not satisfy the request because of an error fetching the needed data. This usually indicates version mismatches or missing pe-files in the runtime library. The error lines up with one (or several) more specific errors. The later contains more detailed information about what specific code that couldnt load and can be found in the error log. This error ends up in the critical log (causing the database to fail startup). A corresponding and more specific error at the same time is written to the error log, describing what assembly failed and how to get even more error information.
        /// </remarks>
        public const uint SCERRCODELOADERERROR = 2027;
        /// <summary> 
        /// Error inspecting assembly.
        /// </summary>
        /// <remarks>
        /// <para>The code loader requested to iterate types in a given (loaded) assembly, but this operation resulted in an error. This usually indicates some kind of reference error where one assembly or module references (direct or indirect) a type that was implied for the former to load properly. Results in a code loader error in the critical error log. See about this above. In companion with this error, Starcounter writes out what assembly failed to load. This might be enough for the developer, but if it isn&#39;t, even more information is availible. To get this additional and extended error information, the error in the error log comes equipped with a reference number (in the form of a GUID). This reference number can be used to find the information lining up with the given exception. To search for this information by reference, consult the Starcounter.Notice log. In the complementary log the following can be found: </para>
        /// <para>- Number of types declared in the failing assembly, and how many of these that wheren&#39;t possible to load. </para>
        /// <para>- Which of the above types that was possible to load (and from that, it should be clear which ones could not) </para>
        /// <para>- The full set of assemblies currently loaded into the database. </para>
        /// <para>- Exception messages (including file name of the target) for each type in the faulty assembly, indicating the broken link. </para>
        /// <para>- Fusion log for each exception message above. </para>
        /// </remarks>
        public const uint SCERRTYPESLOADERROR = 2029;
        /// <summary> 
        /// At least one error has been detected during weaving of the application code.
        /// </summary>
        /// <remarks>
        /// All specific weaver related errors use this general weaving error as an umbrella to communicate their existence to the user. That is, this general weaving error will be found in the critical logging branch of errors and all specific errors will be found in the extended error logging system (the error log). When this error is found in the critical error log, consult the error log for a corresponding ScErrWeavingFailed error. That error will head a list of more specific errors that are the real source for this error.
        /// </remarks>
        public const uint SCERRWEAVINGERROR = 2030;
        /// <summary> 
        /// The server name is too long (max 31 chars) or contains invalid characters.
        /// </summary>
        /// <remarks>
        /// Indicates that the specified server name is to long (a server name is currently limited to 31 characters) or contains invalid characters.
        /// </remarks>
        public const uint SCERRINVALIDSERVERNAME = 2031;
        /// <summary> 
        /// Shutdown timed out: Stuck in user code.
        /// </summary>
        /// <remarks>
        /// The shutdown thread got stuck in user code and was aborted.
        /// </remarks>
        public const uint SCERRSHUTDOWNTIMEDOUT = 2032;
        /// <summary> 
        /// Too many virtual CPUs configured.
        /// </summary>
        /// <remarks>
        /// Indicates that the configured number of virtual CPUs wasn&#39;t supported. Currently no more than 4 virtual CPUs is supported in the x64 version and no more then a 1 virtual CPU is supported in the x86 version.
        /// </remarks>
        public const uint SCERRBADSCHEDCOUNTCONFIG = 2035;
        /// <summary> 
        /// Wrong transaction log version.
        /// </summary>
        /// <remarks>
        /// The transaction log file is versioned and must match the version of the loading transaction logging runtime library when the database is started. If versions differ, this error will be in the error log and the database will fail to load.
        /// </remarks>
        public const uint SCERRWRONGTLOGVERSION = 2036;
        /// <summary> 
        /// Bad unload/reload configuration.
        /// </summary>
        /// <remarks>
        /// <para>Configuration given for either an unload operation or a reload counterpart violated some constraint. What type of operation (unload/reload) the error originated from will be indicated by the context, a parachute error for respective routine. </para>
        /// <para>In current version, all configuration is done internally so this error should not occur. In previous versions it could occur because of bad settings in configuration for unload/reload. </para>
        /// </remarks>
        public const uint SCERRBADREBUILDCONFIG = 2037;
        /// <summary> 
        /// The specified transaction log size is either smaller then the minimum size, larger then the maximum size or not aligned with the disk sector size.
        /// </summary>
        public const uint SCERRBADTLOGSIZECONFIG = 2043;
        /// <summary> 
        /// The specified disk sector size is not compatible with storage.
        /// </summary>
        public const uint SCERRBADDISKSECTORSIZECONFIG = 2044;
        /// <summary> 
        /// The specified new image size is smaller then the current image size. Making the image smaller is not allowed.
        /// </summary>
        public const uint SCERRSHRINKIMAGENOTSUPPORTED = 2045;
        /// <summary> 
        /// The specified image size is either smaller then the minimum size, larger then the maximum size or not aligned with the database block size.
        /// </summary>
        public const uint SCERRBADIMAGESIZECONFIG = 2046;
        /// <summary> 
        /// A database with the specified name already exists.
        /// </summary>
        public const uint SCERRDATABASEALREADYEXISTS = 2047;
        /// <summary> 
        /// The operation failed because an expected DLL module couldn&#39;t be loaded.
        /// </summary>
        /// <remarks>
        /// Most likely caused by a faulty installation.
        /// </remarks>
        public const uint SCERRMODULENOTFOUND = 2048;
        /// <summary> 
        /// When parsing the application arguments to scdbs.exe, the system routine parsing it reported an error.
        /// </summary>
        /// <remarks>
        /// Consult the system error code to find out more about what failed.
        /// </remarks>
        public const uint SCERRPARSINGAPPARGS = 2049;
        /// <summary> 
        /// The number of arguments passed to scdbs.exe did not include all arguments required.
        /// </summary>
        /// <remarks>
        /// Consult the documentation to see what arguments Starcounter encforces, accepts and what constraints apply.
        /// </remarks>
        public const uint SCERRTOOFEWAPPARGS = 2050;
        /// <summary> 
        /// All arguments passed to scdbs.exe did not confirm to the constraints, or some of them were found incompatible.
        /// </summary>
        /// <remarks>
        /// Consult the documentation to see what arguments Starcounter encforces, accepts and what constraints apply.
        /// </remarks>
        public const uint SCERRAPPARGSSEMANTICVIOLATION = 2051;
        /// <summary> 
        /// The -unload directive specified as a server application argument can not be used when the database is empty and not initialized.
        /// </summary>
        public const uint SCERRUNLOADEMPTYDATABASE = 2052;
        /// <summary> 
        /// The -reload directive specified as a server application argument can not be used when the database is allready populated.
        /// </summary>
        public const uint SCERRRLDPOPULATEDDATABASE = 2053;
        /// <summary> 
        /// The operation failed because an expected function export from a module dependent upon was not found.
        /// </summary>
        /// <remarks>
        /// Most likely caused by a faulty installation.
        /// </remarks>
        public const uint SCERRFUNCEXPORTNOTFOUND = 2054;
        /// <summary> 
        /// Bad backup directory config. Either the configured directory does not exist or the directory path is to long.
        /// </summary>
        /// <remarks>
        /// Backup directory is currently the same as output directory.
        /// </remarks>
        public const uint SCERRBADBACKUPDIRECTORYCONFIG = 2055;
        /// <summary> 
        /// Bad log directory config. Either the configuration does not exist or the configured directory isn&#39;t valid.
        /// </summary>
        public const uint SCERRBADLOGDIRECTORYCONFIG = 2056;
        /// <summary> 
        /// The server was started, instructed to execute a compare of application and core schemas, and when the database was examined, the server detected it to not being bound to any previous application, i.e. containing no schema.
        /// </summary>
        public const uint SCERRCOMPAREEMPTYDATABASE = 2057;
        /// <summary> 
        /// An operation failed due to the transaction/redo log not being initialized.
        /// </summary>
        /// <remarks>
        /// The transaction/redo log is considered uninitialized after it has been created and before it has successfully been started at least once.
        /// </remarks>
        public const uint SCERRTLOGNOTINITIALIZED = 2058;
        /// <summary> 
        /// Attempt to acquire control of the database environment timed out.
        /// </summary>
        /// <remarks>
        /// <para>Error occurs if unable to acquire the shared object used to control ownership of the database environment on startup. </para>
        /// <para>Could indicate that the memory manager is unresponsive (scpmm.exe). Try again after terminating this process. </para>
        /// </remarks>
        public const uint SCERRACQUIREDBCONTROLTIMEOUT = 2059;
        /// <summary> 
        /// Attempt to create activity monitor shared buffer timed out.
        /// </summary>
        /// <remarks>
        /// <para>Error occurs if unable create activity monitor shared buffer timed out. </para>
        /// <para>Could indicate that the activity monitor is unresponsive (scactmon.exe) and has therefore not released the buffer. Try again after terminating the process. </para>
        /// </remarks>
        public const uint SCERRCREATEACTMONBUFTIMEOUT = 2060;
        /// <summary> 
        /// Allocating shared memory for database state failed. Access was denied.
        /// </summary>
        /// <remarks>
        /// <para>Check so that the user that runs the database or server has the priviledge to create/open globally named objects, &quot;SeCreateGlobalPrivilege&quot;. </para>
        /// <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
        /// </remarks>
        public const uint SCERRDBSTATEACCESSDENIED = 2061;
        /// <summary> 
        /// Checksum mismatch detected in image file when image file was loaded into memory.
        /// </summary>
        public const uint SCERRBADIMAGEFILECKSUMLOAD = 2063;
        /// <summary> 
        /// Client application communication library was already loaded.
        /// </summary>
        /// <remarks>
        /// When the client runtime was trying to load the library that communicates with Starcounter databases, a library with the same name (&quot;sccoredb&quot;) was found already loaded.
        /// </remarks>
        public const uint SCERRCLIENTBACKENDALREADYLOADED = 2064;
        /// <summary> 
        /// Client application communication library failed to load.
        /// </summary>
        /// <remarks>
        /// When the client runtime was trying to load the library that communicates with Starcounter databases, the library was not found loaded after initialization.
        /// </remarks>
        public const uint SCERRCLIENTBACKENDNOTLOADED = 2065;
        /// <summary> 
        /// Client application communication library was loaded from the wrong path.
        /// </summary>
        /// <remarks>
        /// When the client runtime was trying to load the library that communicates with Starcounter databases, the library was found loaded from the wrong path.
        /// </remarks>
        public const uint SCERRCLIENTBACKENDWRONGPATH = 2066;
        /// <summary> 
        /// Problems starting shared memory monitor process.
        /// </summary>
        /// <remarks>
        /// Shared memory monitor process is started by each Starcounter server and is used to correctly free clients&#39; shared memory resources.
        /// </remarks>
        public const uint SCERRSTARTSHAREDMEMORYMONITOR = 2067;
        /// <summary> 
        /// A project file the weaver engine depends on could not be found. Either it was deleted or the program hosting the weaver did not resolve its path to the correct installation directory.
        /// </summary>
        public const uint SCERRWEAVERPROJECTFILENOTFOUND = 2068;
        /// <summary> 
        /// The database intends to open the database shared memory parameters, but failed when trying to concatenate the database name prefix with the database name.
        /// </summary>
        public const uint SCERRCONSTRUCTDBSHMPARAMNAME = 2069;
        /// <summary> 
        /// The database intends to open the shared memory object with the database shared memory parameters, but failed because of an illegal char in the db_data_dir_path in the psetup parameter.
        /// </summary>
        public const uint SCERRDBDATADIRPATHINVALIDMBCHAR = 2070;
        /// <summary> 
        /// The database intends to open the shared memory object with the database shared memory parameters, but failed because a wide character that cannot be converted into a multibyte character was encountered.
        /// </summary>
        public const uint SCERRDBSHMPARAMNAMEINVALIDWCHAR = 2071;
        /// <summary> 
        /// Failed to construct the segment name with sequence number.
        /// </summary>
        public const uint SCERRCONSTRUCTSEGMENTNAMESEQNO = 2075;
        /// <summary> 
        /// The database intends to get the sequence number and append it to the segment name, but failed because a wide character that cannot be converted into a multibyte character was encountered.
        /// </summary>
        public const uint SCERRSEGMENTNAMEINVALIDWCHAR = 2076;
        /// <summary> 
        /// The database intends to register with the monitor, but it failed because constructing the monitor interface name would result in buffer overflow.
        /// </summary>
        public const uint SCERRCONSTRMONITORINTERFACENAME = 2077;
        /// <summary> 
        /// The database intends to register with the monitor, but failed to map the monitor interface in shared memory.
        /// </summary>
        public const uint SCERRDBMAPMONITORINTERFACEINSHM = 2078;
        /// <summary> 
        /// The database tried to register with the monitor, but failed to acquire an owner ID.
        /// </summary>
        public const uint SCERRDBACQUIREOWNERID = 2080;
        /// <summary> 
        /// The client intends to open the database shared memory parameters, but failed when trying to concatenate the database name prefix with the database name.
        /// </summary>
        public const uint SCERRCCONSTRUCTDBSHMPARAMNAME = 2081;
        /// <summary> 
        /// The client intends to register with the monitor, but failed because constructing the monitor interface name would result in buffer overflow.
        /// </summary>
        public const uint SCERRCCONSTRMONITORINTERFACENAME = 2082;
        /// <summary> 
        /// The client tried to register with the monitor, but failed to acquire an owner ID.
        /// </summary>
        public const uint SCERRCACQUIREOWNERID = 2083;
        /// <summary> 
        /// The client intends to open the database shared memory segment, but failed because it is not initialized yet.
        /// </summary>
        public const uint SCERRCLIENTOPENDBSHMSEGMENT = 2084;
        /// <summary> 
        /// The client intends to open the database shared memory segment, but failed because constructing the name of the database shared memory segment would result in buffer overflow.
        /// </summary>
        public const uint SCERRCCONSTRDBSHMSEGMENTNAME = 2085;
        /// <summary> 
        /// The client failed to initialize because it could not acquire a client number.
        /// </summary>
        public const uint SCERRCLIENTACQUIRECLIENTNUMBER = 2086;
        /// <summary> 
        /// An unknown exception was thrown by the database when trying something in the call to setup during the initialization phase.
        /// </summary>
        public const uint SCERRUNKNOWNEXCEPTTHROWNINSETUP = 2087;
        /// <summary> 
        /// The database intends to register with the monitor, but it failed to open the monitor interface.
        /// </summary>
        /// <remarks>
        /// If there is no monitor (ScConnMonitor.exe) running in the same terminal server session as the database process, this is likely the cause of the error. If the database is to be started in session 0, it may help to start the Starcounter System Server service. If the database is to be started in session 1, it may help to start the Starcounter Administrator.
        /// </remarks>
        public const uint SCERRDBOPENMONITORINTERFACE = 2088;
        /// <summary> 
        /// The database failed to create the database shared memory parameters file.
        /// </summary>
        public const uint SCERRDBCREATEDBSHMPARAMETERS = 2089;
        /// <summary> 
        /// Failed to create the database shared memory parameters file.
        /// </summary>
        public const uint SCERRCREATEDBSHMPARAMETERS = 2090;
        /// <summary> 
        /// Failed to open the database shared memory parameters file.
        /// </summary>
        public const uint SCERROPENDBSHMPARAMETERS = 2091;
        /// <summary> 
        /// Failed to map the database shared memory parameters in shared memory.
        /// </summary>
        public const uint SCERRMAPDBSHMPARAMETERSINSHM = 2092;
        /// <summary> 
        /// Failed to open monitor interface.
        /// </summary>
        public const uint SCERROPENMONITORINTERFACE = 2094;
        /// <summary> 
        /// Failed to map monitor interface in shared memory.
        /// </summary>
        public const uint SCERRMAPMONITORINTERFACEINSHM = 2095;
        /// <summary> 
        /// The database failed to map the database shared memory parameters in shared memory.
        /// </summary>
        public const uint SCERRDBMAPDBSHMPARAMETERSINSHM = 2096;
        /// <summary> 
        /// The client failed to open the database shared memory parameters file.
        /// </summary>
        public const uint SCERRCOPENDBSHMPARAMETERS = 2097;
        /// <summary> 
        /// The client failed to map the database shared memory parameters in shared memory.
        /// </summary>
        public const uint SCERRCMAPDBSHMPARAMETERSINSHM = 2098;
        /// <summary> 
        /// The database failed to open the debug file.
        /// </summary>
        public const uint SCERRDBOPENDEBUGFILE = 2099;
        /// <summary> 
        /// The database tried to unregister with the monitor, but failed to release its owner ID.
        /// </summary>
        public const uint SCERRDBRELEASEOWNERID = 2100;
        /// <summary> 
        /// The client tried to unregister with the monitor, but failed to release its owner ID.
        /// </summary>
        public const uint SCERRCRELEASEOWNERID = 2101;
        /// <summary> 
        /// The database tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
        /// </summary>
        public const uint SCERRDBACQUIREOWNERIDTIMEOUT = 2102;
        /// <summary> 
        /// The client tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
        /// </summary>
        public const uint SCERRCACQUIREOWNERIDTIMEOUT = 2103;
        /// <summary> 
        /// The database tried to unregister with the monitor, but failed to release its owner ID because a timeout occurred.
        /// </summary>
        public const uint SCERRDBRELEASEOWNERIDTIMEOUT = 2104;
        /// <summary> 
        /// The client tried to unregister with the monitor, but failed to release its owner ID because a timeout occurred.
        /// </summary>
        public const uint SCERRCRELEASEOWNERIDTIMEOUT = 2105;
        /// <summary> 
        /// Trying to queue a job on scheduler with incorrect id.
        /// </summary>
        /// <remarks>
        /// You can queue a job on scheduler with id from 0 to n-1, where n is a number of logical processors in the system.
        /// </remarks>
        public const uint SCERRBADSCHEDIDSUPPLIED = 2106;
        /// <summary> 
        /// The client tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
        /// </summary>
        public const uint SCERRCACQUIREOWNERIDTIMEOUT2 = 2107;
        /// <summary> 
        /// A Starcounter database with the specified name is already started.
        /// </summary>
        public const uint SCERRDBALREADYSTARTED = 2108;
        /// <summary> 
        /// Invalid configuration prevents the database from being accessible.
        /// </summary>
        /// <remarks>
        /// Generic error indicating that the configuration of a database is invalid preventing the database from being accessible.
        /// </remarks>
        public const uint SCERRBADDATABASECONFIG = 2109;
        /// <summary> 
        /// Problems starting network gateway process.
        /// </summary>
        /// <remarks>
        /// Network gateway process is started by each Starcounter server and is used to provide communication for Starcounter with outside world.
        /// </remarks>
        public const uint SCERRSTARTNETWORKGATEWAY = 2110;
        /// <summary> 
        /// Shared memory chunks number is missing in database configuration file or has invalid value.
        /// </summary>
        public const uint SCERRBADCHUNKSNUMBERCONFIG = 2111;
        /// <summary> 
        /// The properties of the disk drive doesn&#39;t match the transaction log (is the disk drive is configured for a different sector size than the transaction log is built for?).
        /// </summary>
        public const uint SCERRTLOGSTORAGEINCOMPATIBLE = 2112;
        /// <summary> 
        /// The specified handle is invalid.
        /// </summary>
        /// <remarks>
        /// Usually implies that the object referenced by the handle has been freed.
        /// </remarks>
        public const uint SCERRINVALIDHANDLE = 3001;
        /// <summary> 
        /// Attempt to release a user reference to an adapter failed because no user references was registered.
        /// </summary>
        public const uint SCERRNOUSERADAPTERREFERENCES = 3002;
        /// <summary> 
        /// Operation to set an option failed because the value of an option couldn&#39;t be set to the specified value.
        /// </summary>
        /// <remarks>
        /// Error is raised when configuring a channel. This is usually done using values from named port configuration (I/O handler configuration) but if so, configuration should already have been validated and this error should not occur.
        /// </remarks>
        public const uint SCERRBADCHANNELOPTIONVALUE = 3003;
        /// <summary> 
        /// The operation couldn&#39;t be completed because memory couldn&#39;t be locked.
        /// </summary>
        public const uint SCERRCANTLOCKMEMORY = 3006;
        /// <summary> 
        /// Operation couldn&#39;t be completed because the channel has been closed.
        /// </summary>
        public const uint SCERRCHANNELCLOSED = 3010;
        /// <summary> 
        /// Operation failed because an read has been posted and pending completion.
        /// </summary>
        /// <remarks>
        /// A new read operation can not be posted and certain options can not be set until the operation has completed.
        /// </remarks>
        public const uint SCERRCHANNELREADING = 3011;
        /// <summary> 
        /// Connection timed out because the remote party didn&#39;t respond within an acceptable abount of time.
        /// </summary>
        public const uint SCERRCONNECTTIMEDOUT = 3012;
        /// <summary> 
        /// A connection to a remote endpoint could not be established because the target system actively refused it.
        /// </summary>
        /// <remarks>
        /// This is usually the result when communication could be established with the remote system but the current system wasn&#39;t excepted as a client. An example is when trying to connect to a specific port and address and the addressed system was found but no one was accepting connection requests on that port.
        /// </remarks>
        public const uint SCERRCONNECTIONREFUSED = 3013;
        /// <summary> 
        /// Tried to bind to an invalid endpoint
        /// </summary>
        /// <remarks>
        /// Operation failed because the channel couldn&#39;t be bound to the specified end point since it wasn&#39;t a valid end point.
        /// </remarks>
        public const uint SCERRENDPOINTINVALID = 3014;
        /// <summary> 
        /// The endpoint is occupied
        /// </summary>
        /// <remarks>
        /// Operation failed because the a channel couldn&#39;t be bound to the specified end point since it already was occupied.
        /// </remarks>
        public const uint SCERRENDPOINTOCCUPIED = 3015;
        /// <summary> 
        /// The endpoint couldn&#39;t be reached.
        /// </summary>
        /// <remarks>
        /// A connection couldn&#39;t be established because the specified end point couldn&#39;t be reached. When this error occurs it&#39;s probably because the current machine isn&#39;t connected to a network or only connected to a local network.
        /// </remarks>
        public const uint SCERRENDPOINTUNREACHABLE = 3016;
        /// <summary> 
        /// Operation couldn&#39;t be completed because the listener has been closed.
        /// </summary>
        public const uint SCERRLISTENERCLOSED = 3018;
        /// <summary> 
        /// Channel read operation failed because the message received was larger than allowed.
        /// </summary>
        public const uint SCERRREADBUFFEREXCEEDED = 3019;
        /// <summary> 
        /// Operation could not be completed because there the limit of references to the accessed I/O adapter has been reached.
        /// </summary>
        public const uint SCERRTOMANYADAPTERREFERENCES = 3020;
        /// <summary> 
        /// Operation couldn&#39;t be completed because the contents of the message couldn&#39;t be sent through a channel.
        /// </summary>
        /// <remarks>
        /// This error occurs when trying to write a message containing 0 value bytes when 0 bytes is used as message terminator.
        /// </remarks>
        public const uint SCERRUNWRITABLEMESSAGE = 3021;
        /// <summary> 
        /// Connection to log server closed.
        /// </summary>
        public const uint SCERRLOGSCONNECTIONCLOSED = 3022;
        /// <summary> 
        /// Operation failed because no option with the specified name was availible.
        /// </summary>
        public const uint SCERRUNKNOWNCHANNELOPTION = 3023;
        /// <summary> 
        /// Received a malformed message
        /// </summary>
        /// <remarks>
        /// Operation couldn&#39;t be completed because the contents of a message being read from by a channel couldn&#39;t be interpreted by the channel. Indicates that a message of an invalid format was passed to the process. The channel is closed when this error is detected since the input stream must be considered corrupted.
        /// </remarks>
        public const uint SCERRUNREADABLEMESSAGE = 3024;
        /// <summary> 
        /// An operation failed because the object that only allows access by the owning thread wasn&#39;t owned by the current thread.
        /// </summary>
        public const uint SCERROBJECTNOTOWNED = 3025;
        /// <summary> 
        /// The memory file used to share server information already existed and the process could therefore not claim ownership of the object.
        /// </summary>
        /// <remarks>
        /// Another process holds the memory file open. Could be a conflict with a client application reading server statistics although if the client application is properly implemented this is highly unlikely. In this case the issues should be resolved by trying again to start the server.
        /// </remarks>
        public const uint SCERRCANTCREATEPROCESSSHARE = 3026;
        /// <summary> 
        /// The memory file used to share server information could not be opened. Most likely an indication that the server with the specified name isn&#39;t online.
        /// </summary>
        public const uint SCERRCANTOPENPROCESSSHARE = 3027;
        /// <summary> 
        /// Operation could not complete because of failure to create an I/O adapter. Occurs when the maximum number of I/O adapters has been reached.
        /// </summary>
        public const uint SCERRCANTCREATEADAPTER = 3029;
        /// <summary> 
        /// Operation failed due to insufficient disk space.
        /// </summary>
        public const uint SCERRNOTENOUGHDISKSPACE = 3031;
        /// <summary> 
        /// The memory file used to share server information was of an incompatible version.
        /// </summary>
        public const uint SCERRBADPROCESSSHAREVERSION = 3032;
        /// <summary> 
        /// A timeout occurred because the client could not push a request message to the channels in queue, because it is full. The database have not popped any request message from the channel within the timeout period.
        /// </summary>
        public const uint SCERRCTIMEOUTPUSHREQUESTMESSAGE = 3033;
        /// <summary> 
        /// A timeout occurred because the client could not pop a response message from the channels out queue, because it is empty. The database have not pushed any response message to the channel within the timeout period.
        /// </summary>
        public const uint SCERRCTIMEOUTPOPRESPONSEMESSAGE = 3034;
        /// <summary> 
        /// Database connect failed because the database was not loaded.
        /// </summary>
        public const uint SCERRDATABASEISNOTLOADED = 3035;
        /// <summary> 
        /// Not enough free shared memory. Enough memory chunks could not be acquired to hold the whole message.
        /// </summary>
        public const uint SCERRACQUIRELINKEDCHUNKS = 3036;
        /// <summary> 
        /// No more space in string heap.
        /// </summary>
        /// <remarks>
        /// String heap is used to store type and field names in the kernel. The maximum string heap size if fixed so the only way to resolve this is reduce the number of types and fields store in the database.
        /// </remarks>
        public const uint SCERRSTRINGHEAPOUTOFSPACE = 4002;
        /// <summary> 
        /// Operation must be performed in the context of a valid transaction
        /// </summary>
        /// <remarks>
        /// Operation failed because no transaction was attached to the thread when the operation only could be executed within the context of a transaction (this applies to most database operations). Note that this error can occur even if the transaction isn&#39;t activly detached from the running thread, should another thread force-claim the ownership of the transaction (by for example committing or rolling back the transaction).
        /// </remarks>
        public const uint SCERRNOTRANSACTIONATTACHED = 4003;
        /// <summary> 
        /// The specified extension is not an extension of the specific type.
        /// </summary>
        public const uint SCERRNOTANEXTENSIONOFTYPE = 4008;
        /// <summary> 
        /// Unable to create database schema
        /// </summary>
        /// <remarks>
        /// Indicates that schema creation failed. The reason why schema creation failed is logged before the error is raised.
        /// </remarks>
        public const uint SCERRCANTCREATESCHEMA = 4009;
        /// <summary> 
        /// Indicates that an relation property wasn&#39;t properly declared.
        /// </summary>
        public const uint SCERRNOTPROPERRELATIONATTR = 4011;
        /// <summary> 
        /// The data type is not supported. The data type of a field or property in an Entity class is not supported by the database.
        /// </summary>
        public const uint SCERRUNSUPPORTEDATTRIBUTETYPE = 4012;
        /// <summary> 
        /// A type had to many attributes.
        /// </summary>
        public const uint SCERRTOMANYATTRIBUTES = 4013;
        /// <summary> 
        /// The operation failed because a delete is pending (issued but not finalized).
        /// </summary>
        /// <remarks>
        /// If this error occurs it indicates a bug in the managed binding.
        /// </remarks>
        public const uint SCERRDELETEPENDING = 4016;
        /// <summary> 
        /// Instantiation of a object failed because the object wasn&#39;t a registered type.
        /// </summary>
        public const uint SCERROBJECTNOTATYPE = 4019;
        /// <summary> 
        /// The database is read-only.
        /// </summary>
        public const uint SCERRREADONLYDATABASE = 4020;
        /// <summary> 
        /// An attempt to release an reference that wasn&#39;t registered was intercepted.
        /// </summary>
        /// <remarks>
        /// Probably indicates that the reference counter is out of sync.
        /// </remarks>
        public const uint SCERRNOTRANSREFTORELEASE = 4022;
        /// <summary> 
        /// Too many references registered by the transaction.
        /// </summary>
        /// <remarks>
        /// Only a limited number of references can be registered (the reference counter is a 16-bit integer).
        /// </remarks>
        public const uint SCERRTOMANYTRANSACTIONREFS = 4024;
        /// <summary> 
        /// A change in the durability of an object was requested, but the object was in a state where the durability couldn&#39;t be changed.
        /// </summary>
        public const uint SCERROBJECTILLEGALDURABILITY = 4025;
        /// <summary> 
        /// One of database the image files of the database could not be opened.
        /// </summary>
        /// <remarks>
        /// The most likely case of this error is that the image file does not exists in the configured director or is locked by another process. The reason for why the image file couldn&#39;t be opened is logged seperatly.
        /// </remarks>
        public const uint SCERRCANTOPENIMAGEFILE = 4028;
        /// <summary> 
        /// An error occured when attempting to read from an image file.
        /// </summary>
        /// <remarks>
        /// The reason for the failure is logged seperatly.&quot;
        /// </remarks>
        public const uint SCERRCANTREADIMAGEFILE = 4029;
        /// <summary> 
        /// An error occured when attempting to write to an image file.
        /// </summary>
        /// <remarks>
        /// The reason for the failure is logged seperatly.&quot;
        /// </remarks>
        public const uint SCERRCANTWRITEIMAGEFILE = 4030;
        /// <summary> 
        /// Can&#39;t modify the state of the transaction.
        /// </summary>
        /// <remarks>
        /// Transaction failed because the current transaction was locked on the thread. This error occures if trying to change the current transaction of modify the state of the current transaction in a context where this isn&#39;t allowed (for example when executing a trigger).
        /// </remarks>
        public const uint SCERRTRANSACTIONLOCKEDONTHREAD = 4031;
        /// <summary> 
        /// The commit hook type is properly declared (doesn&#39;t adhere to the constraints of commit hook types).
        /// </summary>
        public const uint SCERRNOTPROPERCOMMITHOOKTYPE = 4033;
        /// <summary> 
        /// The operation failed because an error was detected in a hook callback function.
        /// </summary>
        /// <remarks>
        /// This error code is for example set when there is an error in a commit hook which in turn causes the commit to fail.
        /// </remarks>
        public const uint SCERRERRORINHOOKCALLBACK = 4034;
        /// <summary> 
        /// A cursor operation failed because the cursor wasn&#39;t owned by the current thread and transaction.
        /// </summary>
        public const uint SCERRITERATORNOTOWNED = 4035;
        /// <summary> 
        /// A violation in plugin code was detected.
        /// </summary>
        /// <remarks>
        /// This could either be a declarative violation or one what was caused during runtime due to a callback function that let an exception slip loose. Individual codes for plugin violations are logged separatly; this is the common error that is propagated to user code.
        /// </remarks>
        public const uint SCERRPLUGINCODEVIOLATION = 4036;
        /// <summary> 
        /// A plugin type lacks a default constructor.
        /// </summary>
        public const uint SCERRPLUGINMISSINGDEFAULTCTOR = 4037;
        /// <summary> 
        /// An exception was not handled by a plugin callback or a plugin constructor.
        /// </summary>
        /// <remarks>
        /// Note that errors occuring due to the runtime (code access for ex) should be treated separatly if possible.
        /// </remarks>
        public const uint SCERRPLUGININVOCATIONEXCEPTION = 4038;
        /// <summary> 
        /// The target declared foor a commit hooks is not valid hook.
        /// </summary>
        /// <remarks>
        /// Hooks that implements custom filtering of targets must obey the constraints of targets as specified by the hooking documentation.
        /// </remarks>
        public const uint SCERRINVALIDHOOKTARGET = 4039;
        /// <summary> 
        /// The transaction is already attached to another thread.
        /// </summary>
        /// <remarks>
        /// Indicates an attempt to attach a transaction to a thread when the already is attached to another thread.
        /// </remarks>
        public const uint SCERRTRANSACTIONALREADYBOUND = 4040;
        /// <summary> 
        /// General weaver error.
        /// </summary>
        /// <remarks>
        /// Information error connecting a sample of errors (always at least one) that is the cause of a general weaver error. Weaving errors use a reference approach, meaning that this error will inform the user about a unique reference that can be used to connect all errors and notices that are the underlying source for this error. With that reference it will be easy to find out more specific error information, assisting in correcting the problems that was discovered.
        /// </remarks>
        public const uint SCERRWEAVINGFAILED = 4041;
        /// <summary> 
        /// An entity class in the deployed application was not part of the previously created core database schema.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRMISSINGDEFINITION = 4042;
        /// <summary> 
        /// User code referenced a type, field or method decorated with the HideFromApplications attribute
        /// </summary>
        /// <remarks>
        /// Maps to ATV01
        /// </remarks>
        public const uint SCERRREFFORBIDDENUSERCODE = 4043;
        /// <summary> 
        /// The field may not be explicitly assigned.
        /// </summary>
        /// <remarks>
        /// Illegal field assignment. This error will be the result of user code assigning a construct in Starcounter that doesnt allow explicit assignment. Examples includes reference lists and sequence number fields. (Maps to ATV03)
        /// </remarks>
        public const uint SCERRILLEGALATTRIBUTEASSIGN = 4044;
        /// <summary> 
        /// An unrecognized type used the KnownType attribute.
        /// </summary>
        /// <remarks>
        /// A type claimed to be a type &quot;known&quot; by Starcounter by providing a custom attribute KnownType, but the proof it supplied wasnt a proof that Starcounter recognized. (Maps to ATV04)
        /// </remarks>
        public const uint SCERRUNTRUSTEDKNOWNTYPE = 4045;
        /// <summary> 
        /// A database class was declared as a generic, which is not allowed.
        /// </summary>
        /// <remarks>
        /// Maps to DCV01.
        /// </remarks>
        public const uint SCERRDBCLASSCANTBEGENERIC = 4046;
        /// <summary> 
        /// A database class contained a finalizer, something currently not supported.
        /// </summary>
        /// <remarks>
        /// Maps to DCV02.
        /// </remarks>
        public const uint SCERRILLEGALFINALIZER = 4047;
        /// <summary> 
        /// A database class contained a field declaration where the field was named __typeRef.
        /// </summary>
        /// <remarks>
        /// This name has been reserved by Starcounter. (Maps to DCV03)
        /// </remarks>
        public const uint SCERRILLEGALTYPEREFDECL = 4048;
        /// <summary> 
        /// The instance initializer was too complex. Assign values inside the instance constructor instead.
        /// </summary>
        /// <remarks>
        /// <para>The &quot;initialization&quot; part of the constructor (i.e., the part before the base constructor is called) should be simple enough: </para>
        /// <para>- May not declare lexical scopes (impossible in C#) </para>
        /// <para>- May not declare exception handlers (impossible in C#) </para>
        /// <para>- May not contain branching instructions (like constructs &lt;condition&gt;? &lt;true&gt; : &lt;false&gt; in C#). </para>
        /// <para>Maps to DCV04. </para>
        /// </remarks>
        public const uint SCERRTOCOMPLEXCTOR = 4049;
        /// <summary> 
        /// A database class declared a persistent field that has already been declared in one of the parent classes.
        /// </summary>
        /// <remarks>
        /// Maps to DCV06.
        /// </remarks>
        public const uint SCERRFIELDREDECLARATION = 4050;
        /// <summary> 
        /// Extension classes may only have default constructors.
        /// </summary>
        /// <remarks>
        /// An extension class was discovered and that class declared a constructor other than the default contructor. Extension classes are not allowed to declare any other constructors than the default contructor. (Maps to ECV01)
        /// </remarks>
        public const uint SCERRILLEGALEXTCTOR = 4051;
        /// <summary> 
        /// May not explicitly create instances of extension classes.
        /// </summary>
        /// <remarks>
        /// Code that explicitly instantiated a Starcounter extension class was discovered. This is not allowed. (Maps to ECV02)
        /// </remarks>
        public const uint SCERRILLEGALEXTCREATION = 4052;
        /// <summary> 
        /// The constructor in an extension class contained user code.
        /// </summary>
        /// <remarks>
        /// This is currently not allowed. Note: I can&#39;t really remember why we have this limitation? We should remove it if it&#39;s there for no particular reason. (Maps to ECV03)
        /// </remarks>
        public const uint SCERRILLEGALEXTCTORBODY = 4053;
        /// <summary> 
        /// An extension class that wasn&#39;t declared as &quot;sealed&quot; was found.
        /// </summary>
        /// <remarks>
        /// Maps to ECV04.
        /// </remarks>
        public const uint SCERREXTNOTSEALED = 4054;
        /// <summary> 
        /// A Kind class named something other than &quot;Kind&quot; was found.
        /// </summary>
        /// <remarks>
        /// <para>A Society Object class was discovered as a kind (by extending Something.Kind) but it was named something other than &quot;Kind&quot;. </para>
        /// <para>Note: As long as we provide a tight integration with Society Objects and we validate their code constrains in modules that targets their framework, I guess it is fair to have a set of error codes for those violations as well. However, these might be considered to be removed/moved in the future. (Maps to KCV02) </para>
        /// </remarks>
        public const uint SCERRKINDWRONGNAME = 4055;
        /// <summary> 
        /// A Kind class missing an enclosing concept class was found.
        /// </summary>
        /// <remarks>
        /// All kind classes must be declared inside a Society Object concept class. A kind was found that wasn&#39;t. (Maps to KCV03)
        /// </remarks>
        public const uint SCERRKINDMISSINGCONCEPT = 4056;
        /// <summary> 
        /// A Kind class was derived from an inappropriate base class.
        /// </summary>
        /// <remarks>
        /// A kind class belonging to concept A must be derived from the closest declared kind class of A&#39;s base concept. A class that violated this was found. (Maps to KCV04)
        /// </remarks>
        public const uint SCERRKINDILLEGALPARENT = 4057;
        /// <summary> 
        /// A Kind class missing a default constructor was found.
        /// </summary>
        /// <remarks>
        /// A kind class must have a default constructor, either an explicit one or the one provided by the compiler. (Maps to KCV05)
        /// </remarks>
        public const uint SCERRKINDMISSINGCTOR = 4058;
        /// <summary> 
        /// Classes named &quot;Kind&quot; declared within Society Object concept classes must inherit its parent Kind.
        /// </summary>
        /// <remarks>
        /// Maps to KCV06.
        /// </remarks>
        public const uint SCERRKINDMISSINGPARENT = 4059;
        /// <summary> 
        /// Kind classes must at least have the &quot;protected&quot; visibility.
        /// </summary>
        /// <remarks>
        /// Maps to KCV09.
        /// </remarks>
        public const uint SCERRKINDWRONGVISIBILITY = 4060;
        /// <summary> 
        /// Too complex field initializer in entity class. Initialize it in the constructor instead.
        /// </summary>
        /// <remarks>
        /// A persistent field was equipped with an initialization statement (for example &quot;public int = 0;&quot;), but the statement was to complex for the current version of the code weaver to interpret. Consult weaver documentation about what initialization constructs are supported, and watch out for later versions of Starcounter, being able to support more complex initializations. (Maps to PFV02)
        /// </remarks>
        public const uint SCERRFIELDCOMPLEXINIT = 4061;
        /// <summary> 
        /// Starcounter can&#39;t handle the reference parameters in a certain method.
        /// </summary>
        /// <remarks>
        /// A few restrictions regarding methods with reference parameters of persistent fields currently applies. When this error occurs, look at the method signature of the target method (part of the error message) and see if it can be implemented differently until there is support for more complex field-by-reference cases in later versions of the database. For more information about this, contact Starcounter. (Maps to PFV21)
        /// </remarks>
        public const uint SCERRFIELDREFMETHOD = 4062;
        /// <summary> 
        /// A field was declared as a synonym to a non-existent field.
        /// </summary>
        /// <remarks>
        /// A field was declared as a synonym, but the field it was declared as a synonym for could not be located by the loader. Make sure your synonym targets are accessible as fields in the current class (or a baseclass) and that they are also persistent. (Maps to PFV06)
        /// </remarks>
        public const uint SCERRSYNNOTARGET = 4066;
        /// <summary> 
        /// Mismatch between a synonym&#39;s type and the synonym&#39;s target&#39;s type.
        /// </summary>
        /// <remarks>
        /// There was a mismatch between a synonym and the target it specified. A synonym target must always be assignable for the synonym field and if and of the fields are instrict fields, the type must be a perfect match. (Maps to PFV07)
        /// </remarks>
        public const uint SCERRSYNTYPEMISMATCH = 4067;
        /// <summary> 
        /// A synonym was found that was more visible than its target.
        /// </summary>
        /// <remarks>
        /// When a synonym references a target in another type that its own, the synonym is not allowed to have a wider visibility than the target. (Maps to PFV08)
        /// </remarks>
        public const uint SCERRSYNVISIBILITYMISMATCH = 4068;
        /// <summary> 
        /// A non-readonly synonym to a readonly field was found.
        /// </summary>
        /// <remarks>
        /// When a synonym references a target in another type that its own, the synonym must be readonly if the target is readonly. (Maps to PFV09)
        /// </remarks>
        public const uint SCERRSYNREADONLYMISMATCH = 4069;
        /// <summary> 
        /// A synonym targeted a non-persistent field.
        /// </summary>
        /// <remarks>
        /// When a synonym references a target, the target must be a persistent field and nothing else. (Maps to PFV12)
        /// </remarks>
        public const uint SCERRSYNTARGETNOTPERSISTENT = 4070;
        /// <summary> 
        /// Can&#39;t declare synonyms to private fields.
        /// </summary>
        /// <remarks>
        /// When a synonym references a target, and the target is in another type, the target must never have the private visibility. (Maps to PFV20)
        /// </remarks>
        public const uint SCERRSYNPRIVATETARGET = 4071;
        /// <summary> 
        /// Field not found.
        /// </summary>
        /// <remarks>
        /// A persistent property (in a known assembly) was declared. It supplied a reference to a target database field, but that field was not found when queried for by the loader. (Maps to PPV02)
        /// </remarks>
        public const uint SCERRPERSPROPNOTARGET = 4077;
        /// <summary> 
        /// Two classes of the same full name were found.
        /// </summary>
        /// <remarks>
        /// A class was being discovered by the analyzer and while analyzing, the analyzer detected that a type with the same name (full name) was allready discovered. (Maps to DCV07)
        /// </remarks>
        public const uint SCERRTYPENAMEDUPLICATE = 4078;
        /// <summary> 
        /// A transaction tried to access an object that has been deleted (or which for some reason doesn&#39;t exist).
        /// </summary>
        /// <remarks>
        /// Indicates an attempt to access an object that for some reason doesn&#39;t exist. This error is raised if accessing or attempting to modify an object that has been deleted in another transaction before the start of the current transaction. This error is also used when attempting to access removed objects that exist outside the scope of transactions (like an index) or when accessing removed entity object without any notion of transactions (applies to certain metadata functions).
        /// </remarks>
        public const uint SCERROBJECTDOESNTEXIST = 4083;
        /// <summary> 
        /// A transaction operation failed because the transaction wasn&#39;t owned by the current virtual processor.
        /// </summary>
        public const uint SCERRTRANSACTIONNOTOWNED = 4084;
        /// <summary> 
        /// An entity class in the deployed application declared a field not part of the previously created core database schema.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRATTRNOKERNELFIELD = 4085;
        /// <summary> 
        /// The unload routine failed to execute.
        /// </summary>
        public const uint SCERRUNLOADFAILED = 4086;
        /// <summary> 
        /// The database reload routine failed to execute.
        /// </summary>
        public const uint SCERRRELOADFAILED = 4087;
        /// <summary> 
        /// Transaction abort failed because the transaction already was aborted.
        /// </summary>
        /// <remarks>
        /// Occurs when attempting to manually abort a transaction that isn&#39;t the current transaction and the transaction that was to be aborted already was aborted.
        /// </remarks>
        public const uint SCERRTRANSACTIONALREADYABORTED = 4088;
        /// <summary> 
        /// Context not accessible because it&#39;s owned by a scope.
        /// </summary>
        public const uint SCERRTRANSACTIONSCOPEOWNED = 4089;
        /// <summary> 
        /// The operation failed because of an unhandled transaction conflict.
        /// </summary>
        /// <remarks>
        /// This error is raised by transaction scopes if they are unable to restart a conflicted transaction.
        /// </remarks>
        public const uint SCERRUNHANDLEDTRANSACTCONFLICT = 4090;
        /// <summary> 
        /// Binary data exceeds maximum size.
        /// </summary>
        /// <remarks>
        /// Maximum size allowed for binary data is 4080 bytes (4096 - 16).
        /// </remarks>
        public const uint SCERRBINARYVALUEEXCEEDSMAXSIZE = 4091;
        /// <summary> 
        /// The transaction is readonly and cannot be changed to write-mode.
        /// </summary>
        public const uint SCERRREADONLYTRANSACTION = 4093;
        /// <summary> 
        /// A renamed token (class/field) specifies a previous name not part of the old schema.
        /// </summary>
        /// <remarks>
        /// When specifying renaming instructions for classes and fields, Starcounter forces them to be part of the legacy schema, the one the renaming applies to. There are several probable causes for this error, all of them relating to bad specification of the previous name, and they will be listed on the documentation, helping developers understand what might have caused the error to be raised.
        /// </remarks>
        public const uint SCERRRENAMEMISSINGSOURCE = 4099;
        /// <summary> 
        /// The memory manager has terminated unexpectedly.
        /// </summary>
        public const uint SCERRMEMORYMANAGERISDEAD = 4101;
        /// <summary> 
        /// When reloading the database; the memory manager has detected that the image files represents another database the the one in memory, or another generation of it.
        /// </summary>
        public const uint SCERRNOTTHESAMEDATABASE = 4103;
        /// <summary> 
        /// An error occured when writing to the redo log.
        /// </summary>
        public const uint SCERRCANTWRITETRANSACTIONLOG = 4104;
        /// <summary> 
        /// Reload failed because the process was unable to open the dump file.
        /// </summary>
        public const uint SCERRCANTOPENDUMPFILE = 4105;
        /// <summary> 
        /// Unable to open transaction log.
        /// </summary>
        public const uint SCERRCANTOPENTRANSACTIONLOG = 4106;
        /// <summary> 
        /// Could not expand image file.
        /// </summary>
        public const uint SCERRCANTEXPANDIMAGEFILE = 4107;
        /// <summary> 
        /// Could not create image file.
        /// </summary>
        public const uint SCERRCANTCREATEIMAGEFILE = 4108;
        /// <summary> 
        /// Could not create transaction log.
        /// </summary>
        public const uint SCERRCANTCREATETRANSACTIONLOG = 4109;
        /// <summary> 
        /// The unload routine failed to execute because a dump with the specified name already exists.
        /// </summary>
        public const uint SCERRUNLOADFAILEDDUMPEXISTS = 4111;
        /// <summary> 
        /// When initializing the reload, the reload instruction set unexpectedly was proved invalid.
        /// </summary>
        public const uint SCERRINVALIDRELOADINSTRUCTSET = 4112;
        /// <summary> 
        /// When rebuilding (dump ver 1), a known and un-recoverable error was detected. Please contact Starcounter for guidance.
        /// </summary>
        public const uint SCERRRELOADBUGV1NULLABLEAI63 = 4113;
        /// <summary> 
        /// Unsupported field conversion during rebuild.
        /// </summary>
        public const uint SCERRRELOADUNSUPFIELDCONVERSION = 4114;
        /// <summary> 
        /// Conversion overflow during rebuild.
        /// </summary>
        public const uint SCERRRELOADCONVERSIONOVERFLOW = 4115;
        /// <summary> 
        /// When rebuilding, a version of the dump was not supported.
        /// </summary>
        public const uint SCERRDUMPVERSIONNOTSUPPORTED = 4116;
        /// <summary> 
        /// One or both of the image files are missing.
        /// </summary>
        public const uint SCERRCANTFINDIMAGEFILE = 4117;
        /// <summary> 
        /// One or both of the image files aren&#39;t accessible by the process.
        /// </summary>
        /// <remarks>
        /// <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
        /// <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
        /// </remarks>
        public const uint SCERRCANTACCESSIMAGEFILE = 4118;
        /// <summary> 
        /// One or both of the image files are locked by another process.
        /// </summary>
        /// <remarks>
        /// Corresponds to windows error ERROR_SHARING_VIOLATION.
        /// </remarks>
        public const uint SCERRIMAGEFILELOCKED = 4119;
        /// <summary> 
        /// The transaction log is missing.
        /// </summary>
        public const uint SCERRCANTFINDTRANSACTIONLOG = 4120;
        /// <summary> 
        /// The transaction log isn&#39;t accessible by the process.
        /// </summary>
        /// <remarks>
        /// <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
        /// <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
        /// </remarks>
        public const uint SCERRCANTACCESSTRANSACTIONLOG = 4121;
        /// <summary> 
        /// The transaction log is locked by another process.
        /// </summary>
        /// <remarks>
        /// Corresponds to windows error ERROR_SHARING_VIOLATION.
        /// </remarks>
        public const uint SCERRTRANSACTIONLOGLOCKED = 4122;
        /// <summary> 
        /// Reload failed because the dump file weren&#39;t accessible by the process.
        /// </summary>
        /// <remarks>
        /// <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
        /// <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
        /// </remarks>
        public const uint SCERRCANTACCESSDUMPFILE = 4123;
        /// <summary> 
        /// Reload failed because the dump file was locked by another process.
        /// </summary>
        /// <remarks>
        /// Corresponds to windows error ERROR_SHARING_VIOLATION.
        /// </remarks>
        public const uint SCERRDUMPFILELOCKED = 4124;
        /// <summary> 
        /// The reload completed successfully but reload data violated one or more constraints.
        /// </summary>
        /// <remarks>
        /// The log will also contain which constraint or constraints that was violated.
        /// </remarks>
        public const uint SCERRRELOADCONSTRAINTVIOLATION = 4125;
        /// <summary> 
        /// File transactions cannot be used on this platform version.
        /// </summary>
        /// <remarks>
        /// Minimum version for File transactions is 6 (Windows Vista/Server 2008).
        /// </remarks>
        public const uint SCERRFILETRANSNOTSUPPORTED = 4126;
        /// <summary> 
        /// An entity type declared a base class that did not match the base class previously bound to the core database schema.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRTYPEBASEDEVIATION = 4127;
        /// <summary> 
        /// A database type declared a persistent field that did not match the signature of the attribute in the core schema.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// <para>This error code is used for deviating signatures on persistent fields declared in regular entity classes as well as in Starcounter extension classes. </para>
        /// </remarks>
        public const uint SCERRFIELDSIGNATUREDEVIATION = 4128;
        /// <summary> 
        /// Schema deviations were found when comparing the deployed application to the core schema in the database. Individual deviations detected have been logged. To find these logs, use the activity ID property of this message as a reference.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, at least one violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRSCHEMADEVIATION = 4129;
        /// <summary> 
        /// An extension class in the deployed application declared a field not part of the previously created core database schema. This is caused by addition of fields, inproper renaming of fields or if the extended class of the extension was altered.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERREXTFIELDMISSINGCORE = 4130;
        /// <summary> 
        /// An index was declared but either not part of the core database schema or the signature of that index did not match the signature of the index in the core.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRINDEXDECLARATIONDEVIATION = 4131;
        /// <summary> 
        /// A database definition in the current core database schema have no corresponding entity class in the deployed application.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that a class was either removed or improperly renamed. To remedy the symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRMISSINGENTITYCLASS = 4132;
        /// <summary> 
        /// A database attribute in the current core database schema have no corresponding persistent field in the deployed application.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that a field was either removed or improperly renamed. To remedy the symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRMISSINGPERSISTENTFIELD = 4133;
        /// <summary> 
        /// In the core database schema, an entity class was extended by an extension class that have no corresponding class in the deployed application.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that an extension class was either removed, improperly renamed or was redefined to extend another class than it extended originally. To remedy the symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRMISSINGEXTENSIONCLASS = 4134;
        /// <summary> 
        /// An index was defined in the core database schema but it has no corresponding index declaration in the deployed application.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that an index previously defined have been removed/renamed. To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRINDEXDECLARATIONMISSING = 4135;
        /// <summary> 
        /// At least one commit hook part of the deployed application defined a callback that was not previously bound to the core database definition of the target being hooked.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that either a new hook was added or that a callback on an existing hook was added. To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRHOOKCALLBACKNOTBOUND = 4136;
        /// <summary> 
        /// At least one hook part of the deployed application was missing. The core keeps track of what hooks and callbacks are installed and when a core definition was inspected, a callback was previously bound but no longer part of the deployed application.
        /// </summary>
        /// <remarks>
        /// <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
        /// <para>The reason for this error is that a hook either was removed completly, referenced another target than it was originally, or that a particular callback of such a hook was removed. To remedy this symptom, a database rebuild must be performed. </para>
        /// </remarks>
        public const uint SCERRHOOKCALLBACKNOTINSTALLED = 4137;
        /// <summary> 
        /// A interator operation failed because the iterator was closed.
        /// </summary>
        public const uint SCERRITERATORCLOSED = 4139;
        /// <summary> 
        /// The checkpoint image file could not be backed up because of failure to allocate needed resources.
        /// </summary>
        public const uint SCERRCANTBACKUPOUTOFMEMORY = 4141;
        /// <summary> 
        /// The checkpoint image file could not be backed up because a backup with the same timestamp already existed.
        /// </summary>
        public const uint SCERRCANTBACKUPALREADYEXISTS = 4142;
        /// <summary> 
        /// The checkpoint image file could not be backed up because there wasn&#39;t enough room om the target disk.
        /// </summary>
        public const uint SCERRCANTBACKUPDISKFULL = 4143;
        /// <summary> 
        /// The checkpoint image file could not be backed up as a result of an OS error.
        /// </summary>
        /// <remarks>
        /// The reason for why the image file couldn&#39;t be backed up is logged seperatly.
        /// </remarks>
        public const uint SCERRCANTBACKUPUNEXPERROR = 4144;
        /// <summary> 
        /// Backup file could not be verified.
        /// </summary>
        public const uint SCERRCANTVERIFYBACKUPFILE = 4145;
        /// <summary> 
        /// Backup file could not be found.
        /// </summary>
        public const uint SCERRCANTFINDBACKUPFILE = 4146;
        /// <summary> 
        /// Backup file isn&#39;t accessible by the process.
        /// </summary>
        public const uint SCERRCANTACCESSBACKUPFILE = 4147;
        /// <summary> 
        /// Verification of image file against magic number failed. The file could not be identified as an image file.
        /// </summary>
        public const uint SCERRVERIFYIMAGEMAGICFAILED = 4148;
        /// <summary> 
        /// Verification of backup file against magic number failed. The file could not be identified as a backup file.
        /// </summary>
        public const uint SCERRVERIFYBACKUPMAGICFAILED = 4149;
        /// <summary> 
        /// When inspecting a set of physical redo log files in a multi-file transaction log setup, the server was not able to find the main redo log, indexed 0 (zero). The reason for this indicates that the main redo log file have been tampered with on the server, either it has been deleted or moved.
        /// </summary>
        public const uint SCERRCANTFINDMAINTRANSLOGFILE = 4150;
        /// <summary> 
        /// When inspecting a set of physical redo log files in a multi-file transaction log setup, the server found that the count expected did not match the number of redo logs found. The reason for this indicates that physical files have been tampered with on the server, usually that one of more files have been deleted or moved.
        /// </summary>
        public const uint SCERRTRANSLOGFILECOUNTMISMATCH = 4151;
        /// <summary> 
        /// The physical redo log file referenced by the image opened was not part of the set of file identified as logs. This is most likely caused by the file being renamed or possibly deleted.
        /// </summary>
        public const uint SCERRTRANSLOGCANTFINDREFFILE = 4152;
        /// <summary> 
        /// Large binary data exceeds maximum size.
        /// </summary>
        public const uint SCERRLBINARYVALUEEXCEEDMAXSIZE = 4153;
        /// <summary> 
        /// String data exceeds maximum size.
        /// </summary>
        /// <remarks>
        /// <para>The maximum size is set so that it&#39;s unlikely to be exceeded. If storing a larger string is needed then it will have to be stored as a large binary. </para>
        /// <para>The maximum size of a string in characters is affected by contents of the string and varies between different collations. This since it&#39;s the size of the string packed that is restricted. </para>
        /// </remarks>
        public const uint SCERRSTRINGVALUEEXCEEDSMAXSIZE = 4154;
        /// <summary> 
        /// An error occured when converting string to or from native format.
        /// </summary>
        /// <remarks>
        /// This error may indicate a bug in the string formatter or data corruption.
        /// </remarks>
        public const uint SCERRSTRINGCONVERSIONFAILED = 4155;
        /// <summary> 
        /// Search key data exceeds maximum allowed size.
        /// </summary>
        public const uint SCERRSEARCHKEYEXCEEDSMAXSIZE = 4156;
        /// <summary> 
        /// Operation is only supported during schema update.
        /// </summary>
        public const uint SCERRONLYDURINGSCHEMAUPDATE = 4157;
        /// <summary> 
        /// A thread detached during database operation and failed to reattach leaving the server process in an inconsistent state.
        /// </summary>
        /// <remarks>
        /// Can occur either when processing commit hooks or a delete hook. Caused either by the thread ending the hook operation manually detached (which should not occur) or if an out of memory or similar occurs while attempting to reattach an auto detached thread.
        /// </remarks>
        public const uint SCERRREATTACHFAILEDBADDBSTATE = 4158;
        /// <summary> 
        /// Checkpoint process could not be initialized because of failure to allocated needed resources from OS.
        /// </summary>
        public const uint SCERRCANTINITCHECKPOUTOFMEMORY = 4159;
        /// <summary> 
        /// Checkpoint process could not be initialized because of an unexpected OS error.
        /// </summary>
        /// <remarks>
        /// The reason for why the checkpoint process could not be initialized is logged seperatly.
        /// </remarks>
        public const uint SCERRCANTINITCHECKPUNEXPERROR = 4160;
        /// <summary> 
        /// Operation is not supported during schema update.
        /// </summary>
        public const uint SCERRNOTDURINGSCHEMAUPDATE = 4161;
        /// <summary> 
        /// The operation failed because a transaction commit is pending (issued but not finalized).
        /// </summary>
        /// <remarks>
        /// If this error occurs it indicates a bug in the managed binding.
        /// </remarks>
        public const uint SCERRCOMMITPENDING = 4162;
        /// <summary> 
        /// The operation failed because the maximum size of the thread buffer was exceeded.
        /// </summary>
        public const uint SCERROUTOFTHREADBUFFER = 4163;
        /// <summary> 
        /// Code generation failed.
        /// </summary>
        /// <remarks>
        /// The error is usually due to a previous I/O error. If so that error will have been written to log.
        /// </remarks>
        public const uint SCERRCODEGENERATIONFAILED = 4164;
        /// <summary> 
        /// Index on type of specified attribute not supported.
        /// </summary>
        public const uint SCERRINDEXONTYPENOTSUPPORTED = 4166;
        /// <summary> 
        /// The number of attributes specified exceeds the maximum number of attributes supported in a combined index.
        /// </summary>
        public const uint SCERRTOMANYATTRIBUTESONINDEX = 4167;
        /// <summary> 
        /// No attributes specified on index creation.
        /// </summary>
        public const uint SCERRNOATTRIBUTESONINDEX = 4168;
        /// <summary> 
        /// Invalid sort mask specified on index creation.
        /// </summary>
        public const uint SCERRINVALIDINDEXSORTMASK = 4169;
        /// <summary> 
        /// The size of the defintion exceeded the maximum definition size.
        /// </summary>
        /// <remarks>
        /// The size of a definition depends on the number and type of attributes and the number and type indexes. Reducing the number of attributes and/or indexes might help resolve this problem.
        /// </remarks>
        public const uint SCERRDEFINITIONTOLARGE = 4170;
        /// <summary> 
        /// String conversion failed during rebuild.
        /// </summary>
        public const uint SCERRRELOADFAILSTRINGCONVERT = 4173;
        /// <summary> 
        /// The operation failed because of an invalid object access.
        /// </summary>
        /// <remarks>
        /// <para>Occurs when transaction attempts to access an object that isn&#39;t accessible from the specific transaction. </para>
        /// <para>This could mean that the object either didn&#39;t exist when the transaction started, was deleted within the scope of the transaction or was created within the scope of another transaction not yet committed. </para>
        /// <para>It could also mean that the referenced object isn&#39;t accessible to the current transaction because it belongs to another container. </para>
        /// <para>Only simple reads generates this error. If the error is detected in a write the transaction is aborted. See ScErrINVALID_OBJECT_ACCESS_ABORT. </para>
        /// </remarks>
        public const uint SCERRINVALIDOBJECTACCESS = 4174;
        /// <summary> 
        /// Operation failed be because input does not match schema.
        /// </summary>
        /// <remarks>
        /// Occurs when for example a string attribute is accessed as an integer.
        /// </remarks>
        public const uint SCERRSCHEMACODEMISMATCH = 4177;
        /// <summary> 
        /// Failed to setup dynamic code environment.
        /// </summary>
        public const uint SCERRSETUPDYNCODEENVFAILED = 4178;
        /// <summary> 
        /// Failed to load a dynamically generated library.
        /// </summary>
        /// <remarks>
        /// The error is usually due to a previous I/O error. If so that error will have been written to log.
        /// </remarks>
        public const uint SCERRLOADDYNAMICCODEFAILED = 4179;
        /// <summary> 
        /// An error occured when reading from the redo log.
        /// </summary>
        public const uint SCERRCANTREADTRANSACTIONLOG = 4180;
        /// <summary> 
        /// A PersistentProperty declaration referenced a field in the core that was not found.
        /// </summary>
        /// <remarks>
        /// A persistent property (in a known assembly) was declared. It specified a mapping to a database field in the core, but that field was not found when the class and it&#39;s ancestors where analyzed.
        /// </remarks>
        public const uint SCERRPERSPROPWRONGCOREREF = 4181;
        /// <summary> 
        /// Too many open iterators registered with the current thread.
        /// </summary>
        /// <remarks>
        /// Only a limited number of open iterators is allowed at any given time. To avoid this error be sure to close iterators (releasing the result set) when done with them and don&#39;t keep to many iterators referenced at any given time.
        /// </remarks>
        public const uint SCERRTOMANYOPENITERATORS = 4182;
        /// <summary> 
        /// Unable to generate a name for dynamically generated library.
        /// </summary>
        public const uint SCERRCANTGENERATEDYNLIBNAME = 4183;
        /// <summary> 
        /// Operation is only allowed by a REP transaction.
        /// </summary>
        public const uint SCERRNOTAREPTRANSACTION = 4184;
        /// <summary> 
        /// Operation is not allowed by a REP transaction.
        /// </summary>
        public const uint SCERRNOTIFREPTRANSACTION = 4185;
        /// <summary> 
        /// The memory manager was unable to create a memory file to store database memory.
        /// </summary>
        /// <remarks>
        /// <para>This error occurs when the memory manager was unable to create a memory file for storing database data either when loading image or expanding database memory. If the failure is caused by an OS error code is logged seperatly. The error could also occur because the maximum number of memory files kept by the memory manager has been reached. </para>
        /// <para>If the memory manager fails to create a memory file because it was unable to allocate sufficient memory from the OS then a ScErrOUT_OF_MEMORY will be raised. </para>
        /// </remarks>
        public const uint SCERRCANTCREATEDBMEMORYFILE = 4186;
        /// <summary> 
        /// An index with the specified name already exists.
        /// </summary>
        public const uint SCERRNAMEDINDEXALREADYEXISTS = 4187;
        /// <summary> 
        /// Metadata objects cannot be deleted.
        /// </summary>
        public const uint SCERRMETADATACLASSDELETE = 4188;
        /// <summary> 
        /// Flush process could not be initialized because of failure to allocated needed resources from OS.
        /// </summary>
        public const uint SCERRCANTINITFLUSHOUTOFMEMORY = 4189;
        /// <summary> 
        /// Flush process could not be initialized because of an unexpected OS error.
        /// </summary>
        /// <remarks>
        /// The reason for why the checkpoint process could not be initialized is logged seperatly.
        /// </remarks>
        public const uint SCERRCANTINITFLUSHUNEXPERROR = 4190;
        /// <summary> 
        /// Checksum mismatch detected in database memory on checkpoint.
        /// </summary>
        public const uint SCERRBADMEMORYCKSUMCHECKP = 4191;
        /// <summary> 
        /// Checksum mismatch detected in image file on checkpoint.
        /// </summary>
        public const uint SCERRBADIMAGEFILECKSUMCHECKP = 4192;
        /// <summary> 
        /// Checksum mismatch detected in image file on backup.
        /// </summary>
        public const uint SCERRBADIMAGEFILECKSUMBACKUP = 4193;
        /// <summary> 
        /// A new image file could not be created because a file with the specific name already exists.
        /// </summary>
        public const uint SCERRIMAGEFILEALREADYEXISTS = 4194;
        /// <summary> 
        /// The image page size does not match the page size of the executable.
        /// </summary>
        public const uint SCERRIMAGEEXEPAGESIZEMISMATCH = 4195;
        /// <summary> 
        /// The backup page size does not match the page size of the executable.
        /// </summary>
        public const uint SCERRBACKUPEXEPAGESIZEMISMATCH = 4196;
        /// <summary> 
        /// Operation failed because the output buffer was to small for the output.
        /// </summary>
        public const uint SCERROUTPUTBUFFERTOSMALL = 4197;
        /// <summary> 
        /// Index creation failed because the specified index name was too long.
        /// </summary>
        public const uint SCERRINDEXNAMETOOLONG = 4198;
        /// <summary> 
        /// Operation failed because a transaction was attached to the thread and the operation was not allowed whtin a transaction.
        /// </summary>
        public const uint SCERRNOTWITHINATRANSACTION = 4199;
        /// <summary> 
        /// Index creation failed because the specified index name was of an invalid format.
        /// </summary>
        public const uint SCERRINVALIDINDEXNAME = 4200;
        /// <summary> 
        /// Connect failed because it was called from code running inside a database.
        /// </summary>
        /// <remarks>
        /// Connecting to databases using Db.Connect is currently only supported from client applications. When executing inside a database, a connect is not needed since the code is implicitly connected to the running database.
        /// </remarks>
        public const uint SCERRCONNECTINSIDEDATABASE = 4201;
        /// <summary> 
        /// The SQL statement referenced a class/table whose code type was not found on the client. Missing type: &quot;{0}&quot;. Please add the assembly defining this type using Db.Current.EnableClientAssembly(Assembly), for example using Db.Current.EnableClientAssembly(typeof({0}).Assembly).{1}SQL: &quot;{2}&quot;.
        /// </summary>
        /// <remarks>
        /// <para>To use entity types in a client application, the client runtime must be aware of their code types. All the entity types in a given assembly is instantly known the first type one of them is referenced, as they are implicitly registering themself with the runtime. However, if a type is used in an SQL statement and has not previously been referenced by it&#39;s code type, the query will fail with this error. </para>
        /// <para>To remedy this, you can explicitly add the entity types in a given assembly by issuing Db.Current.EnableClientAssembly(Assembly). </para>
        /// </remarks>
        public const uint SCERRCLIENTENTITYTYPEUNKNOWN = 4202;
        /// <summary> 
        /// A method call failed because the client backend was not yet established.
        /// </summary>
        /// <remarks>
        /// <para>This error usually indicates that a client has not successfully called Db.Connect before it used a Starcounter method that needed to access something in the database. </para>
        /// <para>Example of methods that can cause this error if they are called without the client first have successfully called Db.Connect is: Db.SQL, SqlResult.GetEnumerator, new T where T is an entity type. </para>
        /// </remarks>
        public const uint SCERRCLIENTBACKENDNOTINITIALIZED = 4203;
        /// <summary> 
        /// The assembly was not compiled/weaved for access from a client application.
        /// </summary>
        /// <remarks>
        /// To use Starcounter binaries in a client application, the build system must prepare the code for client access during compilation. This is normally done in Visual Studio, under the project property page &quot;Starcounter&quot; in a Starcounter Library project. Make sure you set the &quot;Enable access from external process&quot; to TRUE.
        /// </remarks>
        public const uint SCERRASSEMBLYNOTPREPAREDFORCLIENT = 4204;
        /// <summary> 
        /// The database connection string is incorrect.
        /// </summary>
        public const uint SCERRINVALIDCLIENTCONNECTSTRING = 4205;
        /// <summary> 
        /// The type- or extenstion binding &quot;{0}&quot; can not be instantiated because the code type is not known. Make sure the code type is assigned using the CodeType property.
        /// </summary>
        public const uint SCERRINSTANTIATEBINDINGNOTYPE = 4206;
        /// <summary> 
        /// The type- or extenstion binding &quot;{0}&quot; can not be instantiated because it represents a type that is declared abstract.
        /// </summary>
        public const uint SCERRINSTANTIATEABSTRACTBINDING = 4207;
        /// <summary> 
        /// Unable to create a new table because the maximum number of tables would be exceeded.
        /// </summary>
        public const uint SCERRMAXNUMBEROFTABLESEXCEEDED = 4208;
        /// <summary> 
        /// Create or alter table failed because the specified table name was too long.
        /// </summary>
        public const uint SCERRTABLENAMETOOLONG = 4209;
        /// <summary> 
        /// Create or alter table failed because the specified table name was of an invalid format.
        /// </summary>
        public const uint SCERRINVALIDTABLENAME = 4210;
        /// <summary> 
        /// Create or alter table failed because the specified column name was too long.
        /// </summary>
        public const uint SCERRCOLUMNNAMETOOLONG = 4211;
        /// <summary> 
        /// Create or alter table failed because the specified column name was of an invalid format.
        /// </summary>
        public const uint SCERRINVALIDCOLUMNNAME = 4212;
        /// <summary> 
        /// Create or alter table failed because a column of a type that requires it to be nullable was not specified as nullable.
        /// </summary>
        public const uint SCERRCOLUMNTYPEMUSTBENULLABLE = 4213;
        /// <summary> 
        /// Create table failed because a table with the specified name already exists.
        /// </summary>
        public const uint SCERRNAMEDTABLEALREADYEXISTS = 4214;
        /// <summary> 
        /// Connecting failed because another database is already connected.
        /// </summary>
        public const uint SCERRALREADYCONNECTEDTOOTHERDB = 4215;
        /// <summary> 
        /// Failed to drop a table because it has already been dropped.
        /// </summary>
        public const uint SCERRTABLEALREADYDROPPED = 4216;
        /// <summary> 
        /// The database process terminated gracefully.
        /// </summary>
        public const uint SCERRDBTERMINATEDGRACEFULLY = 4217;
        /// <summary> 
        /// The database process terminated unexpectedly.
        /// </summary>
        public const uint SCERRDBTERMINATEDUNEXPECTEDLY = 4218;
        /// <summary> 
        /// Unknown database state.
        /// </summary>
        public const uint SCERRUNKNOWNDBSTATE = 4219;
        /// <summary> 
        /// The class is not public. Entity classes must be declared with public visibility.
        /// </summary>
        public const uint SCERRENTITYCLASSNOTPUBLIC = 4220;
        /// <summary> 
        /// The operation failed because a transaction commit is not pending.
        /// </summary>
        public const uint SCERRCOMMITNOTPENDING = 4221;
        /// <summary> 
        /// Transaction abort could not be reset.
        /// </summary>
        public const uint SCERRCANTRESETABORT = 4222;
        /// <summary> 
        /// Wait for log writer to write log entries to disk before completing checkpoint was aborted.
        /// </summary>
        public const uint SCERRCHECKPWAITFORLOGABORTED = 4224;
        /// <summary> 
        /// Unable to write to image file because the write would expand the file and there is no space available on disk.
        /// </summary>
        public const uint SCERRCANTWRITEIMAGEFILEDISKFULL = 4225;
        /// <summary> 
        /// An unknown column type was specified when creating a table.
        /// </summary>
        public const uint SCERRBADCOLUMNTYPE = 4226;
        /// <summary> 
        /// The operation failed because the transaction was bound to a thread.
        /// </summary>
        public const uint SCERRTRANSACTIONBOUND = 4227;
        /// <summary> 
        /// Failed alter table because it has been dropped.
        /// </summary>
        public const uint SCERRTABLEDROPPED = 4228;
        /// <summary> 
        /// Specified session id not valid.
        /// </summary>
        /// <remarks>
        /// The session with the id has either expired or never existed.
        /// </remarks>
        public const uint SCERRINVALIDSESSIONID = 5002;
        /// <summary> 
        /// The specific transaction is not registered with the session.
        /// </summary>
        public const uint SCERRTRANSNOTREGISTEREDWITHSESN = 5003;
        /// <summary> 
        /// Unable to register transaction with session because the maximum number of transactions per session has already been reached.
        /// </summary>
        public const uint SCERRMAXREGISTEREDTRANSREACHED = 5004;
        /// <summary> 
        /// Operations on sessions are only available from clients, not code running inside a database.
        /// </summary>
        public const uint SCERRSESSIONINSIDEDATABASE = 5005;
        /// <summary> 
        /// A call to an operating system level disk access API failed to execute.
        /// </summary>
        public const uint SCERRUNEXPECTEDDISKACCESSERR = 6002;
        /// <summary> 
        /// A call (other than read/write) to an operating system level file access API failed to execute.
        /// </summary>
        public const uint SCERRUNEXPECTEDFILEACCESSERR = 6003;
        /// <summary> 
        /// Recovery detected the transaction log to be corrupt, recovery can&#39;t be completed. The log file needs to be rebuilded before the recovery can be completed.
        /// </summary>
        public const uint SCERRTRANSACTIONLOGCORRUPT = 6005;
        /// <summary> 
        /// An unexpected file I/O error occurred when writing to or reading from the image file.
        /// </summary>
        public const uint SCERRUNEXPECTEDIMAGEFILEERROR = 6006;
        /// <summary> 
        /// An unexpected error was detected when allocating memory for the database image.
        /// </summary>
        public const uint SCERRUNEXPECTEDIMAGEMMAPERROR = 6007;
        /// <summary> 
        /// An unexpected error was detected when waiting for a waitable object.
        /// </summary>
        public const uint SCERRUNEXPECTEDWAITERROR = 6008;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to open an image file.
        /// </summary>
        public const uint SCERRUNEXPERROROPENIMAGEFILE = 6009;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to read from an image file.
        /// </summary>
        public const uint SCERRUNEXPERRORREADIMAGEFILE = 6010;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to write to an image file.
        /// </summary>
        public const uint SCERRUNEXPERRORWRITEIMAGEFILE = 6011;
        /// <summary> 
        /// An unexpected error occured when attempting to initialize a shared object.
        /// </summary>
        public const uint SCERRUNEXPERRORINITSHAREDOBJECT = 6012;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to create the redo log.
        /// </summary>
        public const uint SCERRUNEXPERRORCREATETRANSLOG = 6013;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to open the redo log.
        /// </summary>
        public const uint SCERRUNEXPERROROPENTRANSLOG = 6014;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to read from the redo log.
        /// </summary>
        public const uint SCERRUNEXPERRORREADTRANSLOG = 6015;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to write to the redo log.
        /// </summary>
        public const uint SCERRUNEXPERRORWRITETRANSLOG = 6016;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to open a dump file (SCD or SCDX).
        /// </summary>
        public const uint SCERRUNEXPERROROPENDUMPFILE = 6017;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to read a dump file (SCD or SCDX).
        /// </summary>
        public const uint SCERRUNEXPERRORREADDUMPFILE = 6018;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to write to dump file (SCD or SCDX).
        /// </summary>
        public const uint SCERRUNEXPERRORWRITEDUMPFILE = 6019;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to expand an image file.
        /// </summary>
        public const uint SCERRUNEXPERROREXPANDIMAGEFILE = 6020;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to copy an image file.
        /// </summary>
        public const uint SCERRUNEXPERRORCOPYIMAGEFILE = 6021;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to create an image file.
        /// </summary>
        public const uint SCERRUNEXPERRORCREATEIMAGEFILE = 6022;
        /// <summary> 
        /// The image file is corrupt.
        /// </summary>
        public const uint SCERRIMAGEFILECORRUPT = 6024;
        /// <summary> 
        /// An unexpected error occured when attempting to create a child process.
        /// </summary>
        public const uint SCERRUNEXPERRORCREATEPROCESS = 6026;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to rename dump file from temporary to final name.
        /// </summary>
        public const uint SCERRUNEXPERRORNAMEDUMPFILE = 6027;
        /// <summary> 
        /// When rebuilding, verifying the dump against the magic number failed.
        /// </summary>
        public const uint SCERRVERIFYDUMPMAGICFAILED = 6028;
        /// <summary> 
        /// An unexpected error occured when creating a temporary file name for dump.
        /// </summary>
        /// <remarks>
        /// Name is created using API function GetTempFileName.
        /// </remarks>
        public const uint SCERRUNEXPERRORGETDUMPTMPNAME = 6029;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to create dump file (SCD or SCDX).
        /// </summary>
        public const uint SCERRUNEXPERRORCREATEDUMPFILE = 6030;
        /// <summary> 
        /// The server can&#39;t understand the memory manager.
        /// </summary>
        public const uint SCERRMEMORYMANAGERINCOHERENT = 6031;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a channel read.
        /// </summary>
        public const uint SCERRUNEXPCHANNELREADERROR = 6032;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a channel write.
        /// </summary>
        public const uint SCERRUNEXPCHANNELWRITEERROR = 6033;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a channel accept.
        /// </summary>
        public const uint SCERRUNEXPCHANNELACCEPTERROR = 6034;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a channel connect.
        /// </summary>
        public const uint SCERRUNEXPCHANNELCONNECTERROR = 6035;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a channel close.
        /// </summary>
        public const uint SCERRUNEXPCHANNELCLOSEERROR = 6036;
        /// <summary> 
        /// An unexpected error was detected when creating a listener.
        /// </summary>
        public const uint SCERRUNEXPLISTENERCREATEERROR = 6037;
        /// <summary> 
        /// An unexpected error was detected when initiating or completing a listener close.
        /// </summary>
        public const uint SCERRUNEXPLISTENERCLOSEERROR = 6038;
        /// <summary> 
        /// An unexpected error was detected when opening the server file/trace log.
        /// </summary>
        public const uint SCERRUNEXPERROROPENFILELOG = 6039;
        /// <summary> 
        /// An unexpected OS error occurred when attempting to initialize backup process.
        /// </summary>
        public const uint SCERRUNEXPERRINITBACKUPPROC = 6041;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to backup an image file.
        /// </summary>
        public const uint SCERRUNEXPERRBACKUPIMAGEFILE = 6042;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to open a backup file.
        /// </summary>
        public const uint SCERRUNEXPERROPENBACKUPFILE = 6043;
        /// <summary> 
        /// An unexpected error occurred when attempting to find the redo log(s).
        /// </summary>
        public const uint SCERRUNEXPERRFINDINGTRANSLOG = 6044;
        /// <summary> 
        /// An unexpected error occurred when reading the internal COUNT property of the physical main redo log. The value was 0 (zero).
        /// </summary>
        public const uint SCERRUNEXPERRTRANSLOGCOUNTZERO = 6045;
        /// <summary> 
        /// The reference to the place where the next transaction should be written in the redo log, fetched from the image when loaded, was out of bounds with respect to the sector count of the given file.
        /// </summary>
        public const uint SCERRUNEXPERRILLEGALTLOGSECTREF = 6046;
        /// <summary> 
        /// An unexpected OS error occurred when attempting to initialize checkpoint process.
        /// </summary>
        public const uint SCERRUNEXPERRINITCHECKPPROC = 6047;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to copy code generation base file.
        /// </summary>
        public const uint SCERRUNEXPERRORCOPYCODEFILE = 6048;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to open code generation file.
        /// </summary>
        public const uint SCERRUNEXPERROROPENCODEFILE = 6049;
        /// <summary> 
        /// An unexpected file I/O error occurred when attempting to write to code generation file.
        /// </summary>
        public const uint SCERRUNEXPERRORWRITECODEFILE = 6050;
        /// <summary> 
        /// An unexpected error occurred when attempting to compile code generation output.
        /// </summary>
        /// <remarks>
        /// This error is probably due to a faulty installation. Likely the used compiler is not properly installed.
        /// </remarks>
        public const uint SCERRUNEXPERROREXECUTECOMPILE = 6051;
        /// <summary> 
        /// An unexpected error occurred was returned by the compiler when attempting to compile code generation output.
        /// </summary>
        /// <remarks>
        /// This error should not occur. Please contact Starcounter support.
        /// </remarks>
        public const uint SCERRUNEXPECTEDCOMPILERERROR = 6052;
        /// <summary> 
        /// An unexpected error occurred when attempting to create directory for dynamically generated code.
        /// </summary>
        public const uint SCERRUNEXPERRORCREATECODEDIR = 6053;
        /// <summary> 
        /// An unexpected error occurred when attempting to load dynamically generated code.
        /// </summary>
        public const uint SCERRUNEXPERRORLOADCODEFILE = 6054;
        /// <summary> 
        /// An unexpected error occured when attempting to allocate a OS resource.
        /// </summary>
        public const uint SCERRUNEXPERRORALLOCRESOURCE = 6055;
        /// <summary> 
        /// An unexpected error occured when attempting to release a OS resource.
        /// </summary>
        public const uint SCERRUNEXPERRORFREERESOURCE = 6056;
        /// <summary> 
        /// An unexpected error occured when attempting set, reset or wait for an OS event.
        /// </summary>
        public const uint SCERRUNEXPERRORSETWAITEVENT = 6057;
        /// <summary> 
        /// An unexpected error was detected when creating a memory file for database data.
        /// </summary>
        public const uint SCERRUNEXPERRORCREATEDBMEMFILE = 6058;
        /// <summary> 
        /// Checksum mismatch detected in database memory on checkpoint.
        /// </summary>
        public const uint SCERRUNEXPMEMORYCKSUMCHECKP = 6059;
        /// <summary> 
        /// Checksum mismatch detected in image file on load.
        /// </summary>
        public const uint SCERRUNEXPIMAGEFILECKSUMLOAD = 6060;
        /// <summary> 
        /// Checksum mismatch detected in image file on checkpoint.
        /// </summary>
        public const uint SCERRUNEXPIMAGEFILECKSUMCHECKP = 6061;
        /// <summary> 
        /// Checksum mismatch detected in image file on backup.
        /// </summary>
        public const uint SCERRUNEXPIMAGEFILECKSUMBACKUP = 6062;
        /// <summary> 
        /// An unexpected OS error occurred when attempting to initialize image write process.
        /// </summary>
        public const uint SCERRUNEXPERRINITFLUSHPROC = 6063;
        /// <summary> 
        /// An unexpected OS error occurred when attempting to initialize image write process.
        /// </summary>
        public const uint SCERRUNEXPERRSETDLLDIRECTORY = 6064;
        /// <summary> 
        /// Unexpected internal error in SQL module.
        /// </summary>
        public const uint SCERRSQLINTERNALERROR = 7000;
        /// <summary> 
        /// SQL module was unable to write a schema file to the current temp directory.
        /// </summary>
        /// <remarks>
        /// The schema file is used by external process StarcounterSQL.exe.
        /// </remarks>
        public const uint SCERRSQLEXPORTSCHEMAFAILED = 7001;
        /// <summary> 
        /// SQL module was unable to start external process StarcounterSQL.exe.
        /// </summary>
        public const uint SCERRSQLSTARTPROCESSFAILED = 7002;
        /// <summary> 
        /// SQL module was unable to verify external process StarcounterSQL.exe.
        /// </summary>
        public const uint SCERRSQLVERIFYPROCESSFAILED = 7003;
        /// <summary> 
        /// External process StarcounterSQL.exe was unable to process the current SQL query.
        /// </summary>
        public const uint SCERRSQLPROCESSQUERYFAILED = 7004;
        /// <summary> 
        /// Unexpected internal error in query optimization module.
        /// </summary>
        public const uint SCERRQUERYOPTIMINTERNALERROR = 7006;
        /// <summary> 
        /// Unexpected internal error in query execution module.
        /// </summary>
        public const uint SCERRQUERYEXECINTERNALERROR = 7007;
        /// <summary> 
        /// More than one public identifier (class name, property name etc.) with the same case insensitive representation.
        /// </summary>
        /// <remarks>
        /// Since the SQL is case insensitive such case insensitive ambiguity can not be allowed.
        /// </remarks>
        public const uint SCERRSQLDUPLICATEDIDENTIFIER = 7008;
        /// <summary> 
        /// Can&#39;t establish connection to specified database.
        /// </summary>
        public const uint SCERRCONNCONNECTTODATABASE = 7009;
        /// <summary> 
        /// Error fetching unique SQL query identifier.
        /// </summary>
        public const uint SCERRCONNGETQUERYID = 7010;
        /// <summary> 
        /// Error fetching SQL query results.
        /// </summary>
        public const uint SCERRCONNGETQUERYRESULTS = 7011;
        /// <summary> 
        /// Error fetching SQL query results next page.
        /// </summary>
        public const uint SCERRCONNGETNEXTRESULTSPAGE = 7013;
        /// <summary> 
        /// Error closing open SQL enumerator.
        /// </summary>
        public const uint SCERRCONNCLOSEENUM = 7014;
        /// <summary> 
        /// Error initializing managed SQL function pointers.
        /// </summary>
        public const uint SCERRCONNINITSQLFUNCTIONS = 7015;
        /// <summary> 
        /// Only single object projection is allowed for SQL queries on the client.
        /// </summary>
        public const uint SCERRSINGLEOBJECTPROJECTION = 7016;
        /// <summary> 
        /// The length of the query string exceeds the maximal length allowed.
        /// </summary>
        public const uint SCERRQUERYSTRINGTOOLONG = 7017;
        /// <summary> 
        /// In out of database execution offset key can be obtained only for queries with FETCH statement.
        /// </summary>
        public const uint SCERROFFSETKEYOUTOFPROCESSFETCH = 7019;
        /// <summary> 
        /// Incorrect SQL parameter/variable type.
        /// </summary>
        public const uint SCERRQUERYWRONGPARAMTYPE = 7020;
        /// <summary> 
        /// Incorrect SQL syntax.
        /// </summary>
        public const uint SCERRSQLINCORRECTSYNTAX = 7021;
        /// <summary> 
        /// Not yet implemented SQL feature.
        /// </summary>
        public const uint SCERRSQLNOTIMPLEMENTED = 7022;
        /// <summary> 
        /// Not supported SQL feature.
        /// </summary>
        public const uint SCERRSQLNOTSUPPORTED = 7023;
        /// <summary> 
        /// An unexpected error occurred in unmanaged SQL parser when attempting to format message for SQL syntax error.
        /// </summary>
        public const uint SCERRUNEXPERRSPRINTFSQLSYNTAX = 7024;
        /// <summary> 
        /// An unexpected error occurred in SQL Parser:
        /// </summary>
        public const uint SCERRUNEXPSQLPARSER = 7025;
        /// <summary> 
        /// Specified name of class, property or other object name does not exist in the database.
        /// </summary>
        public const uint SCERRSQLUNKNOWNNAME = 7026;
        /// <summary> 
        /// A transaction was aborted because a constraint was violated.
        /// </summary>
        /// <remarks>
        /// A constraint violation is most likely caused by a bug, restarting a transaction that&#39;s aborted for this reason is therefore not advisable since it&#39;s very likely that the same error will occur again and again each time the transaction commits.
        /// </remarks>
        public const uint SCERRCONSTRAINTVIOLATIONABORT = 8001;
        /// <summary> 
        /// A transaction was aborted because it was in conflict with another transaction.
        /// </summary>
        /// <remarks>
        /// Accessing an object that has been deleted before the transaction started could also cause the current transaction to abort because of a perceived conflict. This can happen if an object is accessed within another transaction then the transaction the object was fetched in and the object at that time has been deleted. The reason for this is that the database engine can&#39;t determine when the object was deleted and therefore assumes that the object existed when the transaction started because of the assumption that the reference was fetched within the current transaction. To avoid this one should only access objects fetched within the context of the current transaction is possible.
        /// </remarks>
        public const uint SCERRTRANSACTIONCONFLICTABORT = 8002;
        /// <summary> 
        /// The transaction has been aborted by the framework because of an external event that suggested that the transaction should be considered invalid.
        /// </summary>
        /// <remarks>
        /// Since the abort error is raised only if data is accessed within the context of the transaction after the transaction aborted, chances are that the occurence this error on user level will be rare. More commonly the user code will only have to deal with the exception causing the transaction to abort.
        /// </remarks>
        public const uint SCERRIMPLICITEXTERNALABORT = 8003;
        /// <summary> 
        /// The transaction has been explicitly aborted by user code.
        /// </summary>
        public const uint SCERREXPLICITEXTERNALABORT = 8004;
        /// <summary> 
        /// The transaction was aborted because of a failure to allocate memory.
        /// </summary>
        public const uint SCERROUTOFMEMORYABORT = 8005;
        /// <summary> 
        /// The transaction was aborted because of an invalid object access.
        /// </summary>
        /// <remarks>
        /// <para>Occurs when transaction attempts to access an object that isn&#39;t accessible from the specific transaction. </para>
        /// <para>This could mean that the object either didn&#39;t exist when the transaction started, was deleted within the scope of the transaction or was created within the scope of another transaction not yet committed. </para>
        /// <para>It could also mean that the referenced object isn&#39;t accessible to the current transaction because it belongs to another container. </para>
        /// <para>Simple read operations that fails because of an invalid object access does not abort the transaction but instead generates a ScErrInvalidObjectAccess error. error. </para>
        /// </remarks>
        public const uint SCERRINVALIDOBJECTACCESSABORT = 8006;
        /// <summary> 
        /// The transaction was aborted because pending writes didn&#39;t match the schema.
        /// </summary>
        /// <remarks>
        /// Occurs when for example a string attribute was written to as an integer. Should not occur unless there is a problem with the binding.
        /// </remarks>
        public const uint SCERRSCHEMACODEMISMATCHABORT = 8007;
        /// <summary> 
        /// The transaction was aborted because code is inconsistent.
        /// </summary>
        /// <remarks>
        /// Occurs when for example an attribute is written as an attribute of a certain type and later read or written as an attribute of a different type.
        /// </remarks>
        public const uint SCERRINCONSISTENTCODEABORT = 8008;
        /// <summary> 
        /// The transaction was aborted because of an attempt to delete a prototype.
        /// </summary>
        public const uint SCERRPROTOTYPEDELETEABORT = 8009;
        /// <summary> 
        /// The transaction was aborted because of a failure to allocate file storage space.
        /// </summary>
        public const uint SCERROUTOFFILESTORAGEABORT = 8010;
        /// <summary> 
        /// The transaction was aborted because of a failure to allocate shared storage memory.
        /// </summary>
        public const uint SCERROUTOFSHAREDSTORAGEABORT = 8012;
        /// <summary> 
        /// The transaction was aborted because of an unexpected internal error.
        /// </summary>
        public const uint SCERRUNEXPINTERNALERRORABORT = 8013;
        /// <summary> 
        /// The transaction was aborted because code constraint violation. That is, the calling code did something is wasn&#39;t supposed to.
        /// </summary>
        /// <remarks>
        /// This is most likely due to a bug in database binding, not in user code.
        /// </remarks>
        public const uint SCERRCODECONSTRVIOLATIONABORT = 8014;
        /// <summary> 
        /// The transaction was aborted since it violated the maximum size of transactions as allowed by the server.
        /// </summary>
        public const uint SCERRTRANSACTIONTOBIGABORT = 8015;
        /// <summary> 
        /// The transaction was aborted since writing it to disk would cause the log to overflow.
        /// </summary>
        /// <remarks>
        /// The server runs in a mode that must assure all transactions are written to the log, and hence the alternative strategy to execute a checkpoint when the log overflows, could not be used.
        /// </remarks>
        public const uint SCERRLOGOVERFLOWABORT = 8016;
        /// <summary> 
        /// The transaction was aborted because of a failure to allocate transaction log buffer space.
        /// </summary>
        public const uint SCERROUTOFLOGMEMORYABORT = 8017;
        /// <summary> 
        /// The transaction was aborted since writing it to disk would cause a space marked for preservation would be overwritten.
        /// </summary>
        /// <remarks>
        /// <para>The server runs in a mode that must assure that portions of the log (&quot;spaces&quot;) are preserved until explicitly released. When the failed transaction was being verified against the underlying set of spaces, the server found that writing it would cause a preserved space to be overwritten, and hence the transaction had to be aborted. </para>
        /// <para>The cause for this situation is due to log space not being properly released, most likely by some custom component (such as a replicator) not behaving correctly. </para>
        /// </remarks>
        public const uint SCERRNOWRITABLELOGSPACEABORT = 8032;
        /// <summary> 
        /// The transaction was aborted because unable to evaluate if sufficient space for the log entry could be allocated in the log file.
        /// </summary>
        public const uint SCERRLOGSPACEEVALFAILEDABORT = 8033;
        /// <summary> 
        /// A server with the specified identity was not found.
        /// </summary>
        public const uint SCERRSERVERNOTFOUND = 10001;
        /// <summary> 
        /// A database with the specified name was not found.
        /// </summary>
        public const uint SCERRDATABASENOTFOUND = 10002;
        /// <summary> 
        /// The server was not running.
        /// </summary>
        public const uint SCERRSERVERNOTRUNNING = 10003;
        /// <summary> 
        /// Attempting to start the database failed.
        /// </summary>
        public const uint SCERRCANTSTARTDATABASE = 10004;
        /// <summary> 
        /// When recovering a previous, not finished maintenance operation, the maintenance directory could not be deleted.
        /// </summary>
        public const uint SCERRCANTDELETEMAINTENANCEDIR = 10005;
        /// <summary> 
        /// When recovering a previous, not finished maintenance operation, the server refused to delete the maintenance journal because there were still files in the maintenance directory.
        /// </summary>
        public const uint SCERRCANTDELETEJOURNALWHENFILES = 10006;
        /// <summary> 
        /// The server detected that the database engine executable (scdbs(w).exe) unexpectedly terminated during a management operation.
        /// </summary>
        public const uint SCERRDATABASEENGINETERMINATED = 10007;
        /// <summary> 
        /// When the server tried to unload the database during a code library update, unloading failed.
        /// </summary>
        public const uint SCERRUPDATEFAILEDTOUNLOAD = 10008;
        /// <summary> 
        /// Failed to update the database user code library.
        /// </summary>
        public const uint SCERRUPDATEFAILED = 10009;
        /// <summary> 
        /// The server failed to create new database files during a code library update.
        /// </summary>
        public const uint SCERRUPDATEFAILEDTOCREATEFILES = 10010;
        /// <summary> 
        /// The operation &quot;{0}&quot; failed.
        /// </summary>
        public const uint SCERRSERVERCOMMANDFAILED = 10011;
        /// <summary> 
        /// Failed to delete the database.
        /// </summary>
        public const uint SCERRDATABASEDELETEFAILED = 10012;
        /// <summary> 
        /// {0} failed because the database was not stopped.
        /// </summary>
        public const uint SCERRDATABASENOTSTOPPED = 10013;
        /// <summary> 
        /// The database configuration specified a database engine not part of the configured engines known by the server.
        /// </summary>
        public const uint SCERRWRONGDATABASEENGINECONFIG = 10014;
        /// <summary> 
        /// The engine executable file was not found in the location as specified in the servers engine configuration.
        /// </summary>
        public const uint SCERRCONFENGINEEXENOTFOUND = 10015;
        /// <summary> 
        /// {0} failed due to an unexpected problem.
        /// </summary>
        public const uint SCERRUNEXPECTEDCOMMANDEXCEPTION = 10016;
        /// <summary> 
        /// Visual Studio 2010 is not found in the system. This component is required by Starcounter Visual Studio 2010 developer&#39;s integration.
        /// </summary>
        public const uint SCERRINSTALLERVS2010NOTFOUND = 11002;
        /// <summary> 
        /// One or more instances of Microsoft Visual Studio (devenv.exe) are running. Please shut them down and press OK.
        /// </summary>
        public const uint SCERRINSTALLERVSTUDIOISRUNNING = 11003;
        /// <summary> 
        /// Proper Microsoft DirectX version is not installed in the system. This component is required by Starcounter activity monitor component.
        /// </summary>
        public const uint SCERRINSTALLERDXORVIDEOCARD = 11004;
        /// <summary> 
        /// DirectX diagnostic utility has exited with the error code.
        /// </summary>
        public const uint SCERRINSTALLERDXDIAGPROBLEM = 11005;
        /// <summary> 
        /// Can&#39;t read keys from INI settings file.
        /// </summary>
        public const uint SCERRINSTALLERCORRUPTEDINIFILE = 11006;
        /// <summary> 
        /// Can&#39;t read value from INI settings file for a certain key.
        /// </summary>
        public const uint SCERRINSTALLERCANTREADSETTINGVALUE = 11007;
        /// <summary> 
        /// Can&#39;t access the Visual Studio safe imports path in the registry. This component is required by Starcounter Visual Studio integration.
        /// </summary>
        public const uint SCERRINSTALLERVSSAFEIMPORTSREGISTRY = 11008;
        /// <summary> 
        /// The Visual Studio integration setup returned an error.
        /// </summary>
        public const uint SCERRINSTALLERSETUPVSINTEGRATION = 11009;
        /// <summary> 
        /// Running Visual Studio 2008 for Starcounter integration installation has failed.
        /// </summary>
        public const uint SCERRINSTALLERVSTUDIO2008 = 11010;
        /// <summary> 
        /// Running regedit for Starcounter integration installation has failed.
        /// </summary>
        public const uint SCERRINSTALLERREGEDIT = 11011;
        /// <summary> 
        /// One of the processes was not finished within allowed time interval.
        /// </summary>
        public const uint SCERRINSTALLERPROCESSTIMEOUT = 11012;
        /// <summary> 
        /// Problem adding Windows Firewall exception.
        /// </summary>
        public const uint SCERRINSTALLERFIREWALLEXCEPTION = 11013;
        /// <summary> 
        /// The number of installed servers differs from expected. Please properly uninstall previous Starcounter instance before starting a new installation.
        /// </summary>
        public const uint SCERRINSTALLERWRONGSERVERSNUMBER = 11014;
        /// <summary> 
        /// Installation process has been aborted.
        /// </summary>
        public const uint SCERRINSTALLERABORTED = 11015;
        /// <summary> 
        /// General installer internal exception type.
        /// </summary>
        public const uint SCERRINSTALLERINTERNALPROBLEM = 11016;
        /// <summary> 
        /// One of the external processes didn&#39;t exit with correct exit code.
        /// </summary>
        public const uint SCERRINSTALLERPROCESSWRONGERRORCODE = 11017;
        /// <summary> 
        /// One of the external processes didn&#39;t accomplish the indended task.
        /// </summary>
        public const uint SCERRINSTALLERPROCESSTASKNOTACCOMP = 11018;
        /// <summary> 
        /// The Visual Studio 2010 IDE was never initialized. Please start Visual Studio once before you install.
        /// </summary>
        public const uint SCERRINSTALLERVS2010NOTINITIALIZED = 11019;
        /// <summary> 
        /// Another Starcounter setup instance is running.
        /// </summary>
        public const uint SCERRINSTALLERALREADYSTARTED = 11020;
        /// <summary> 
        /// The installer could not find the VSIX installer engine executable.
        /// </summary>
        public const uint SCERRVSIXENGINENOTFOUND = 11026;
        /// <summary> 
        /// The installer could not find the VSIX deployment package.
        /// </summary>
        public const uint SCERRVSIXPACKAGENOTFOUND = 11027;
        /// <summary> 
        /// The installer failed to launch the VSIX installer engine.
        /// </summary>
        public const uint SCERRVSIXENGINECOULDNOTSTART = 11028;
        /// <summary> 
        /// The VSIX installer engine did not complete in time.
        /// </summary>
        public const uint SCERRVSIXENGINETIMEDOUT = 11029;
        /// <summary> 
        /// The VSIX installer engine failed to install or uninstall the deployment package.
        /// </summary>
        public const uint SCERRVSIXENGINEFAILED = 11030;
        /// <summary> 
        /// Visual Studio 2012 is not installed. This component is required by Starcounter Visual Studio 2012 developer&#39;s integration.
        /// </summary>
        public const uint SCERRINSTALLERVS2012NOTFOUND = 11031;
        /// <summary> 
        /// At least two components have equal installation directories. All components should be installed in different directories.
        /// </summary>
        public const uint SCERRINSTALLERSAMEDIRECTORIES = 11032;
        /// <summary> 
        /// Unable to deploy code library. The code library could not be deployed due to previous problems.
        /// </summary>
        public const uint SCERRUNABLETODEPLOYMENT = 12001;
        /// <summary> 
        /// Unable to deploy code library. The code library could not be deployed due to an unexpected condition. Please restart Visual Studio using the /log switch or consult the help link to find additional help.
        /// </summary>
        public const uint SCERRUNEXPECTEDDEPLOYMENTEXCEPT = 12002;
        /// <summary> 
        /// Can&#39;t find code library file. The path to the code library archive was not set. Check your projects &quot;ScArchive&quot;-related properties or consult the help link to find additional help.
        /// </summary>
        public const uint SCERRCODELIBARYPATHNOSET = 12003;
        /// <summary> 
        /// Can&#39;t find code library file. The path to the code library archive referenced a file that was not found. Check your projects &quot;ScArchive&quot;-related properties or consult the help link to find additional help.
        /// </summary>
        public const uint SCERRCODELIBARYFILENOTFOUND = 12004;
        /// <summary> 
        /// Can&#39;t find code library file. The path to the code library archive referenced a file type not supported. Check your projects &quot;ScArchiveExtension&quot; property or consult the help link to find additional help.
        /// </summary>
        public const uint SCERRWRONGCODELIBARYEXTENSION = 12005;
        /// <summary> 
        /// The input directory does not exist.
        /// </summary>
        public const uint SCERRCODELIBINPUTDIRNOTFOUND = 12006;
        /// <summary> 
        /// The cache directory could not be created.
        /// </summary>
        public const uint SCERRCODELIBFAILEDNEWCACHEDIR = 12007;
    }
}
